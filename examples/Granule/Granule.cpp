



/* This file was generated by NEMO (http://wiki.call-cc.org/nemo) version 9.0
 on Mon Oct  6 11:27:15 2014 */


#include "Granule.h"
#include "exceptions.h"
#include "network.h"
#include "dict.h"
#include "integerdatum.h"
#include "doubledatum.h"
#include "dictutils.h"
#include "numerics.h"
#include <limits>

#include "universal_data_logger_impl.h"

#include <iomanip>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>

namespace nest {


  /* 
   * Check function return value.
   *    opt == 0 means SUNDIALS function allocates memory so check if
   *             returned NULL pointer
   *    opt == 1 means SUNDIALS function returns a flag so check if
   *             flag >= 0
   *    opt == 2 means function allocates memory so check if returned
   *             NULL pointer 
   */

  static int check_flag(void *flagvalue, const char *funcname, int opt)
  {
    int *errflag;

    /* Check if CVode/IDA function returned NULL pointer - no memory allocated */
    if (opt == 0 && flagvalue == NULL) 
    {
      fprintf(stderr, 
              "\nCVode/IDA error: %s() failed - returned NULL pointer\n\n",
              funcname);
      return(1); 
    }

    /* Check if flag < 0 */
    else if (opt == 1) 
    {
      errflag = (int *) flagvalue;
      if (*errflag < 0) {
        fprintf(stderr, 
                "\nCVode/IDA error: %s() failed with flag = %d\n\n",
                funcname, *errflag);
        return(1); }
    }

  /* Check if function returned NULL pointer - no memory allocated */
  else if (opt == 2 && flagvalue == NULL) 
  {
    fprintf(stderr, 
            "\nMemory error: %s() failed - returned NULL pointer\n\n",
            funcname);
    return(1); 
  }

    return(0);
  }


  void adjust_zero_crossings (N_Vector v, double abstol)
  {
    int i;
    for (i = 0; i < NV_LENGTH_S(v); i++)
    {
        if (fabs(NV_Ith_S(v,i)) < abstol) NV_Ith_S(v,i) = 0;
    }
    return;
  }




  int fsolve (int (*fss)(const gsl_vector *, void *user_data, gsl_vector *), int N, gsl_vector *fval, void *user_data, std::string name)
  {
      
      const gsl_multiroot_fsolver_type * T = gsl_multiroot_fsolver_hybrid;
      gsl_multiroot_fsolver * s = gsl_multiroot_fsolver_alloc (T, N);
      gsl_multiroot_function f = {fss, N, user_data};

      int status, iter;
      gsl_vector *x = gsl_vector_alloc (N);
      
      for (int i = 0; i < N; i++)
      {
         gsl_vector_set (x, i, 0.0);
      }

      gsl_multiroot_fsolver_set (s, &f, x);

      iter = 0;
      do
      {
         iter++;
         status = gsl_multiroot_fsolver_iterate (s);

         if ((status == GSL_EBADFUNC) ||
             (status == GSL_ENOPROG))
         {
            throw GSLSolverFailure(name, status);
         }
         
         status =  gsl_multiroot_test_residual (s->f, 1e-7);
      }
      while (status == GSL_CONTINUE && iter < 1000);

      for (int i = 0; i < N; i++)
      {
         gsl_vector_set (fval, i, gsl_vector_get (s->x, i));
      }

      gsl_vector_free (x);
      gsl_multiroot_fsolver_free (s);

      return 0;
  }






double comp162_alfa double v, double Q10, const void* params {

  double rv229;

  double comp162_Valfa, comp162_Aalfa;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp162_Valfa =  p.comp162_Valfa;
  comp162_Aalfa =  p.comp162_Aalfa;
  rv229  =  Q10 * comp162_Aalfa * exp(v / comp162_Valfa);  return rv229;
}
 



double comp52_beta_b double v, double Q10, const void* params {

  double rv230;

  double comp52_Kbeta_b, comp52_V0beta_b, comp52_Abeta_b;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp52_Kbeta_b =  p.comp52_Kbeta_b;
  comp52_V0beta_b =  p.comp52_V0beta_b;
  comp52_Abeta_b =  p.comp52_Abeta_b;
  rv230  =  Q10 * comp52_Abeta_b * comp52_sigm(v + -(comp52_V0beta_b), comp52_Kbeta_b, params);  return rv230;
}
 



double comp88_alpha_c double v, double cai, double Q10, const void* params {

  double rv231;

  double comp88_Kalpha_c, comp88_Balpha_c, comp88_Aalpha_c;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp88_Kalpha_c =  p.comp88_Kalpha_c;
  comp88_Balpha_c =  p.comp88_Balpha_c;
  comp88_Aalpha_c =  p.comp88_Aalpha_c;
  rv231  =  (Q10 * comp88_Aalpha_c) / (1.0 + (comp88_Balpha_c * exp(v / comp88_Kalpha_c)) / cai);  return rv231;
}
 



double comp106_alpha_d double v, double Q10, const void* params {

  double rv232;

  double comp106_Kalpha_d, comp106_V0alpha_d, comp106_Aalpha_d;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp106_Kalpha_d =  p.comp106_Kalpha_d;
  comp106_V0alpha_d =  p.comp106_V0alpha_d;
  comp106_Aalpha_d =  p.comp106_Aalpha_d;
  rv232  =  Q10 * comp106_Aalpha_d * exp((v + -(comp106_V0alpha_d)) / comp106_Kalpha_d);  return rv232;
}
 



double comp52_beta_a double v, double Q10, const void* params {

  double rv233;

  double comp52_Kbeta_a, comp52_V0beta_a, comp52_Abeta_a;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp52_Kbeta_a =  p.comp52_Kbeta_a;
  comp52_V0beta_a =  p.comp52_V0beta_a;
  comp52_Abeta_a =  p.comp52_Abeta_a;
  rv233  =  Q10 * comp52_Abeta_a / exp((v + -(comp52_V0beta_a)) / comp52_Kbeta_a);  return rv233;
}
 



double comp162_teta double v, double Q10, const void* params {

  double rv234;

  double comp162_Vteta, comp162_Ateta;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp162_Vteta =  p.comp162_Vteta;
  comp162_Ateta =  p.comp162_Ateta;
  rv234  =  Q10 * comp162_Ateta * exp(-(v) / comp162_Vteta);  return rv234;
}
 



double comp121_beta_n double v, double Q10, const void* params {

  double rv235;

  double comp121_Kbeta_n, comp121_V0beta_n, comp121_Abeta_n;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp121_Kbeta_n =  p.comp121_Kbeta_n;
  comp121_V0beta_n =  p.comp121_V0beta_n;
  comp121_Abeta_n =  p.comp121_Abeta_n;
  rv235  =  Q10 * comp121_Abeta_n * exp((v + -(comp121_V0beta_n)) / comp121_Kbeta_n);  return rv235;
}
 



double comp52_alpha_a double v, double Q10, const void* params {

  double rv236;

  double comp52_Kalpha_a, comp52_V0alpha_a, comp52_Aalpha_a;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp52_Kalpha_a =  p.comp52_Kalpha_a;
  comp52_V0alpha_a =  p.comp52_V0alpha_a;
  comp52_Aalpha_a =  p.comp52_Aalpha_a;
  rv236  =  Q10 * comp52_Aalpha_a * comp52_sigm(v + -(comp52_V0alpha_a), comp52_Kalpha_a, params);  return rv236;
}
 



double comp52_alpha_b double v, double Q10, const void* params {

  double rv237;

  double comp52_Kalpha_b, comp52_V0alpha_b, comp52_Aalpha_b;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp52_Kalpha_b =  p.comp52_Kalpha_b;
  comp52_V0alpha_b =  p.comp52_V0alpha_b;
  comp52_Aalpha_b =  p.comp52_Aalpha_b;
  rv237  =  Q10 * comp52_Aalpha_b * comp52_sigm(v + -(comp52_V0alpha_b), comp52_Kalpha_b, params);  return rv237;
}
 



double comp162_beta double v, double Q10, const void* params {

  double rv238;

  double comp162_Vbeta, comp162_Abeta;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp162_Vbeta =  p.comp162_Vbeta;
  comp162_Abeta =  p.comp162_Abeta;
  rv238  =  Q10 * comp162_Abeta * exp(-(v) / comp162_Vbeta);  return rv238;
}
 



double comp136_linoid double x, double y, const void* params {

  double rv239;

  double v241;
  if (fabs(x / y) < 1e-06) 
      {v241  =  y * (1.0 + -(x / y / 2.0));} 
      else 
        {v241  =  x / (exp(x / y) + -1.0);}; 
rv239  =  v241;  return rv239;
}
 



double comp136_alpha_n double v, double Q10, const void* params {

  double rv242;

  double comp136_Kalpha_n, comp136_V0alpha_n, comp136_Aalpha_n;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp136_Kalpha_n =  p.comp136_Kalpha_n;
  comp136_V0alpha_n =  p.comp136_V0alpha_n;
  comp136_Aalpha_n =  p.comp136_Aalpha_n;
  rv242  =  Q10 * comp136_Aalpha_n * comp136_linoid(v + -(comp136_V0alpha_n), comp136_Kalpha_n, params);  return rv242;
}
 



double comp121_alpha_n double v, double Q10, const void* params {

  double rv243;

  double comp121_Kalpha_n, comp121_V0alpha_n, comp121_Aalpha_n;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp121_Kalpha_n =  p.comp121_Kalpha_n;
  comp121_V0alpha_n =  p.comp121_V0alpha_n;
  comp121_Aalpha_n =  p.comp121_Aalpha_n;
  rv243  =  Q10 * comp121_Aalpha_n * exp((v + -(comp121_V0alpha_n)) / comp121_Kalpha_n);  return rv243;
}
 



double comp26_beta_u double v, double Q10, const void* params {

  double rv244;

  double comp26_Kbeta_u, comp26_V0beta_u, comp26_Abeta_u;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp26_Kbeta_u =  p.comp26_Kbeta_u;
  comp26_V0beta_u =  p.comp26_V0beta_u;
  comp26_Abeta_u =  p.comp26_Abeta_u;
  rv244  =  Q10 * comp26_Abeta_u * exp((v + -(comp26_V0beta_u)) / comp26_Kbeta_u);  return rv244;
}
 



double comp26_beta_s double v, double Q10, const void* params {

  double rv245;

  double comp26_Kbeta_s, comp26_V0beta_s, comp26_Abeta_s;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp26_Kbeta_s =  p.comp26_Kbeta_s;
  comp26_V0beta_s =  p.comp26_V0beta_s;
  comp26_Abeta_s =  p.comp26_Abeta_s;
  rv245  =  Q10 * comp26_Abeta_s * exp((v + -(comp26_V0beta_s)) / comp26_Kbeta_s);  return rv245;
}
 



double comp136_beta_n double v, double Q10, const void* params {

  double rv246;

  double comp136_Kbeta_n, comp136_V0beta_n, comp136_Abeta_n;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp136_Kbeta_n =  p.comp136_Kbeta_n;
  comp136_V0beta_n =  p.comp136_V0beta_n;
  comp136_Abeta_n =  p.comp136_Abeta_n;
  rv246  =  Q10 * comp136_Abeta_n * exp((v + -(comp136_V0beta_n)) / comp136_Kbeta_n);  return rv246;
}
 



double comp52_sigm double x, double y, const void* params {

  double rv247;

  rv247  =  1.0 / (exp(x / y) + 1.0);  return rv247;
}
 



double comp88_beta_c double v, double cai, double Q10, const void* params {

  double rv248;

  double comp88_Kbeta_c, comp88_Bbeta_c, comp88_Abeta_c;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp88_Kbeta_c =  p.comp88_Kbeta_c;
  comp88_Bbeta_c =  p.comp88_Bbeta_c;
  comp88_Abeta_c =  p.comp88_Abeta_c;
  rv248  =  (Q10 * comp88_Abeta_c) / (1.0 + cai / (comp88_Bbeta_c * exp(v / comp88_Kbeta_c)));  return rv248;
}
 



double comp106_beta_d double v, double Q10, const void* params {

  double rv249;

  double comp106_Kbeta_d, comp106_V0beta_d, comp106_Abeta_d;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp106_Kbeta_d =  p.comp106_Kbeta_d;
  comp106_V0beta_d =  p.comp106_V0beta_d;
  comp106_Abeta_d =  p.comp106_Abeta_d;
  rv249  =  Q10 * comp106_Abeta_d * exp((v + -(comp106_V0beta_d)) / comp106_Kbeta_d);  return rv249;
}
 



double comp26_alpha_u double v, double Q10, const void* params {

  double rv250;

  double comp26_Kalpha_u, comp26_V0alpha_u, comp26_Aalpha_u;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp26_Kalpha_u =  p.comp26_Kalpha_u;
  comp26_V0alpha_u =  p.comp26_V0alpha_u;
  comp26_Aalpha_u =  p.comp26_Aalpha_u;
  rv250  =  Q10 * comp26_Aalpha_u * exp((v + -(comp26_V0alpha_u)) / comp26_Kalpha_u);  return rv250;
}
 



double comp26_alpha_s double v, double Q10, const void* params {

  double rv251;

  double comp26_Kalpha_s, comp26_V0alpha_s, comp26_Aalpha_s;
  const ~A::Parameters_Granule & p = *(reinterpret_cast< const Granule::Parameters_ *>(params));

  comp26_Kalpha_s =  p.comp26_Kalpha_s;
  comp26_V0alpha_s =  p.comp26_V0alpha_s;
  comp26_Aalpha_s =  p.comp26_Aalpha_s;
  rv251  =  Q10 * comp26_Aalpha_s * exp((v + -(comp26_V0alpha_s)) / comp26_Kalpha_s);  return rv251;
}
 




extern "C" int Granule_dynamics (double t, N_Vector y, N_Vector f, void* pnode)
{

   double v214, if215, v212, comp25_ca, cai, comp88_cai, comp25_cao, cao, comp26_cao, comp26_cai, comp25_cai, comp26_F, comp19_celsius, comp26_R, comp26_e, v, CaHVA_h184, CaHVA_m183, comp26_gbar, i_CaHVA, ica, comp25_ica, comp88_cai1, comp26_Q10, comp121_B_ninf, comp121_V0_ninf, KM_m_inf201, comp23_A, comp23_B, comp23_g, comp162_Q10, comp22_A, comp22_B, comp22_g, comp24_A, comp24_B, comp24_g, comp88_Q10, comp106_Q10, comp52_K_binf, comp52_V0_binf, comp52_b_inf, comp136_Q10, comp121_Q10, comp52_K_ainf, comp52_V0_ainf, comp52_a_inf, comp52_Q10, KA_h_inf187, comp88_c_inf, comp26_u_inf, comp136_tau_n, comp88_tau_c, KM_m_tau202, comp162_ACon, comp162_Con, comp52_tau_b, comp52_tau_a, comp162_Adelta, comp162_delta, comp26_tau_s, comp26_tau_u, comp26_s_inf, KA_m_inf185, comp162_Aepsilon, comp162_epsilon, comp162_AOoff, comp162_Ooff, comp162_AOon, comp162_Oon, comp106_d_inf, comp162_Agamma, comp162_gamma, comp136_n_inf, comp162_ACoff, comp162_Coff, comp106_tau_d, CaHVA_m_inf179, CaHVA_h_tau182, KA_m_tau186, KCa_m_tau192, KV_m_inf206, KA_h_tau188, Kir_m_tau197, KCa_m_inf191, comp162_b, comp162_a, CaHVA_h_inf181, KV_m_tau207, CaHVA_m_tau180, Kir_m_inf196, comp162_Na_zO, comp162_Na_z, comp162_e, comp162_gbar, i_Na, ina, comp88_e, KCa_m195, comp88_gbar, i_KCa, comp136_e, KV_m210, comp136_gbar, i_KV, comp106_e, Kir_m200, comp106_gbar, i_Kir, comp121_e, KM_m205, comp121_gbar, i_KM, comp52_e, KA_h190, KA_m189, comp52_gbar, i_KA, ik, comp22_e, comp21_diam, comp21_L, i_AMPA, comp24_e, i_NMDA, comp23_e, i_GABA, comp156_e, comp156_gbar, i_Lkg1, comp159_egaba, comp159_ggaba, i_Lkg2, i, comp162_Na_zI6, comp162_Na_zC5, comp162_Na_zI5, comp162_Na_zC4, comp162_Na_zI4, comp162_Na_zC3, comp162_Na_zI3, comp162_Na_zC2, comp162_Na_zI2, comp162_Na_zC1, comp162_Na_zI1, comp162_Vteta, comp121_Kalpha_n, comp135_vcbdur, comp136_V0beta_n, comp50_vchold, comp135_vchold, comp121_V0beta_n, comp20_C_m, comp52_V0beta_b, comp52_V0beta_a, comp87_vchdur, comp88_Aalpha_c, comp178_vcbase, comp135_vcinc, comp88_Abeta_c, comp136_Kbeta_n, comp22_tauA, comp50_vcbase, comp87_vchold, comp22_tauB, comp22_tau1, comp136_Kalpha_n, comp22_tau2, comp87_vcsteps, comp26_V0beta_u, comp26_V0beta_s, comp121_Aalpha_n, comp120_vcbase, comp52_Aalpha_b, comp105_cnbase, comp52_Aalpha_a, comp106_Kalpha_d, comp25_d, comp155_vcinc, comp25_F, comp23_scale_factor, comp136_Aalpha_n, comp178_vcsteps, comp26_Aalpha_u, comp26_Aalpha_s, comp105_cnout, comp135_vchdur, comp50_cnout, comp178_vcbdur, comp26_Kalpha_s, comp26_Kalpha_u, comp26_Kbeta_s, comp19_Ra, comp26_Kbeta_u, comp52_Kbeta_b, comp52_Kbeta_a, comp136_Abeta_n, comp52_V0alpha_b, comp52_V0alpha_a, comp105_vcsteps, comp178_vchdur, comp50_cn, comp26_V0alpha_u, comp162_Abeta, comp26_V0alpha_s, comp120_vchold, comp105_cnsteps, comp162_Vbeta, comp88_Balpha_c, comp24_scale_factor, comp105_vcinc, comp52_Abeta_b, comp52_Abeta_a, comp87_vcbdur, comp87_vcinc, comp136_V0alpha_n, comp178_vchold, comp105_cninc, comp162_n2, comp162_n1, comp162_n4, comp121_Abeta_n, comp162_n3, comp26_Abeta_u, comp26_Abeta_s, comp155_vcsteps, comp162_Aalfa, comp178_vcinc, comp88_Kbeta_c, comp155_vchdur, comp105_cnhold, comp88_Kalpha_c, comp19_V_t, comp120_vcbdur, comp106_V0alpha_d, comp22_scale_factor, comp50_vchdur, comp25_beta, comp105_vcbdur, comp106_V0beta_d, comp50_vcsteps, comp106_Abeta_d, comp24_tp, comp120_vcinc, comp162_Ateta, comp155_vcbase, comp50_vcbdur, comp25_cai0, comp106_Aalpha_d, comp155_vcbdur, comp50_vcinc, comp121_V0alpha_n, comp88_Bbeta_c, comp155_vchold, comp52_Kalpha_b, comp52_Kalpha_a, comp87_vcbase, comp120_vchdur, comp22_tp, comp23_tauB, comp23_tauA, comp23_tau2, comp23_tau1, comp105_vchold, comp105_vchdur, comp24_tau1, comp105_vcbase, comp120_vcsteps, comp121_Kbeta_n, comp24_tau2, comp24_tauA, comp106_Kbeta_d, comp24_tauB, comp162_Valfa, comp23_tp, comp135_vcbase, comp135_vcsteps;

   // S is shorthand for the type that describes the model state
   typedef Granule::State_ S;
	
   // cast the node ptr to an object of the proper type
   assert(pnode);
   const Granule & node =  *(reinterpret_cast<Granule*>(pnode));
   Granule & vnode =  *(reinterpret_cast<Granule*>(pnode));

   // params is a reference to the model parameters
   const struct Granule::Parameters_ *params;
   params = &(node.P_);

   // state is a reference to the model state
   struct Granule::State_ *state;
   state = &(vnode.S_);
	
   // y[] must be the state vector supplied by the integrator,
   // not the state vector in the node, node.S_.y[].

   comp162_Vteta  =  params->comp162_Vteta;
   comp121_Kalpha_n  =  params->comp121_Kalpha_n;
   comp135_vcbdur  =  params->comp135_vcbdur;
   comp136_V0beta_n  =  params->comp136_V0beta_n;
   comp50_vchold  =  params->comp50_vchold;
   comp162_Agamma  =  params->comp162_Agamma;
   comp135_vchold  =  params->comp135_vchold;
   comp121_V0beta_n  =  params->comp121_V0beta_n;
   comp156_e  =  params->comp156_e;
   comp20_C_m  =  params->comp20_C_m;
   comp52_V0beta_b  =  params->comp52_V0beta_b;
   comp52_V0beta_a  =  params->comp52_V0beta_a;
   comp159_ggaba  =  params->comp159_ggaba;
   comp162_ACon  =  params->comp162_ACon;
   comp87_vchdur  =  params->comp87_vchdur;
   comp88_Aalpha_c  =  params->comp88_Aalpha_c;
   comp178_vcbase  =  params->comp178_vcbase;
   comp135_vcinc  =  params->comp135_vcinc;
   comp88_Abeta_c  =  params->comp88_Abeta_c;
   comp136_Kbeta_n  =  params->comp136_Kbeta_n;
   comp22_tauA  =  params->comp22_tauA;
   comp50_vcbase  =  params->comp50_vcbase;
   comp87_vchold  =  params->comp87_vchold;
   comp22_tauB  =  params->comp22_tauB;
   comp21_L  =  params->comp21_L;
   comp22_tau1  =  params->comp22_tau1;
   comp136_Kalpha_n  =  params->comp136_Kalpha_n;
   comp22_tau2  =  params->comp22_tau2;
   comp52_K_binf  =  params->comp52_K_binf;
   comp87_vcsteps  =  params->comp87_vcsteps;
   comp26_V0beta_u  =  params->comp26_V0beta_u;
   comp26_V0beta_s  =  params->comp26_V0beta_s;
   comp121_Aalpha_n  =  params->comp121_Aalpha_n;
   comp120_vcbase  =  params->comp120_vcbase;
   comp25_cao  =  params->comp25_cao;
   comp52_Aalpha_b  =  params->comp52_Aalpha_b;
   comp105_cnbase  =  params->comp105_cnbase;
   comp52_Aalpha_a  =  params->comp52_Aalpha_a;
   comp106_Kalpha_d  =  params->comp106_Kalpha_d;
   comp25_d  =  params->comp25_d;
   comp155_vcinc  =  params->comp155_vcinc;
   comp25_F  =  params->comp25_F;
   comp23_scale_factor  =  params->comp23_scale_factor;
   comp136_Aalpha_n  =  params->comp136_Aalpha_n;
   comp162_e  =  params->comp162_e;
   comp178_vcsteps  =  params->comp178_vcsteps;
   comp26_R  =  params->comp26_R;
   comp26_Aalpha_u  =  params->comp26_Aalpha_u;
   comp26_Aalpha_s  =  params->comp26_Aalpha_s;
   comp105_cnout  =  params->comp105_cnout;
   comp21_diam  =  params->comp21_diam;
   comp135_vchdur  =  params->comp135_vchdur;
   comp26_F  =  params->comp26_F;
   comp50_cnout  =  params->comp50_cnout;
   comp178_vcbdur  =  params->comp178_vcbdur;
   comp26_Kalpha_s  =  params->comp26_Kalpha_s;
   comp26_Kalpha_u  =  params->comp26_Kalpha_u;
   comp26_Kbeta_s  =  params->comp26_Kbeta_s;
   comp19_Ra  =  params->comp19_Ra;
   comp26_Kbeta_u  =  params->comp26_Kbeta_u;
   comp159_egaba  =  params->comp159_egaba;
   comp106_e  =  params->comp106_e;
   comp52_Kbeta_b  =  params->comp52_Kbeta_b;
   comp52_Kbeta_a  =  params->comp52_Kbeta_a;
   comp162_AOoff  =  params->comp162_AOoff;
   comp162_AOon  =  params->comp162_AOon;
   comp136_Abeta_n  =  params->comp136_Abeta_n;
   comp52_V0alpha_b  =  params->comp52_V0alpha_b;
   comp136_e  =  params->comp136_e;
   comp52_V0alpha_a  =  params->comp52_V0alpha_a;
   comp105_vcsteps  =  params->comp105_vcsteps;
   comp178_vchdur  =  params->comp178_vchdur;
   comp50_cn  =  params->comp50_cn;
   comp26_V0alpha_u  =  params->comp26_V0alpha_u;
   comp162_Abeta  =  params->comp162_Abeta;
   comp26_V0alpha_s  =  params->comp26_V0alpha_s;
   comp120_vchold  =  params->comp120_vchold;
   comp105_cnsteps  =  params->comp105_cnsteps;
   comp162_Vbeta  =  params->comp162_Vbeta;
   comp88_Balpha_c  =  params->comp88_Balpha_c;
   comp24_scale_factor  =  params->comp24_scale_factor;
   comp52_K_ainf  =  params->comp52_K_ainf;
   comp105_vcinc  =  params->comp105_vcinc;
   comp52_Abeta_b  =  params->comp52_Abeta_b;
   comp52_Abeta_a  =  params->comp52_Abeta_a;
   comp87_vcbdur  =  params->comp87_vcbdur;
   comp87_vcinc  =  params->comp87_vcinc;
   comp136_V0alpha_n  =  params->comp136_V0alpha_n;
   comp178_vchold  =  params->comp178_vchold;
   comp105_cninc  =  params->comp105_cninc;
   comp162_n2  =  params->comp162_n2;
   comp162_n1  =  params->comp162_n1;
   comp162_n4  =  params->comp162_n4;
   comp121_Abeta_n  =  params->comp121_Abeta_n;
   comp162_n3  =  params->comp162_n3;
   comp26_Abeta_u  =  params->comp26_Abeta_u;
   comp26_Abeta_s  =  params->comp26_Abeta_s;
   comp52_e  =  params->comp52_e;
   comp52_V0_ainf  =  params->comp52_V0_ainf;
   comp155_vcsteps  =  params->comp155_vcsteps;
   comp162_Aalfa  =  params->comp162_Aalfa;
   comp178_vcinc  =  params->comp178_vcinc;
   comp88_Kbeta_c  =  params->comp88_Kbeta_c;
   comp155_vchdur  =  params->comp155_vchdur;
   comp105_cnhold  =  params->comp105_cnhold;
   comp121_e  =  params->comp121_e;
   comp88_Kalpha_c  =  params->comp88_Kalpha_c;
   comp19_V_t  =  params->comp19_V_t;
   comp120_vcbdur  =  params->comp120_vcbdur;
   comp24_e  =  params->comp24_e;
   comp22_e  =  params->comp22_e;
   comp106_V0alpha_d  =  params->comp106_V0alpha_d;
   comp121_B_ninf  =  params->comp121_B_ninf;
   comp22_scale_factor  =  params->comp22_scale_factor;
   comp50_vchdur  =  params->comp50_vchdur;
   comp106_gbar  =  params->comp106_gbar;
   comp25_beta  =  params->comp25_beta;
   comp19_celsius  =  params->comp19_celsius;
   comp162_gbar  =  params->comp162_gbar;
   comp105_vcbdur  =  params->comp105_vcbdur;
   comp106_V0beta_d  =  params->comp106_V0beta_d;
   comp50_vcsteps  =  params->comp50_vcsteps;
   comp106_Abeta_d  =  params->comp106_Abeta_d;
   comp24_tp  =  params->comp24_tp;
   comp120_vcinc  =  params->comp120_vcinc;
   comp162_Ateta  =  params->comp162_Ateta;
   comp155_vcbase  =  params->comp155_vcbase;
   comp50_vcbdur  =  params->comp50_vcbdur;
   comp88_e  =  params->comp88_e;
   comp26_gbar  =  params->comp26_gbar;
   comp121_gbar  =  params->comp121_gbar;
   comp25_cai0  =  params->comp25_cai0;
   comp106_Aalpha_d  =  params->comp106_Aalpha_d;
   comp155_vcbdur  =  params->comp155_vcbdur;
   comp23_e  =  params->comp23_e;
   comp50_vcinc  =  params->comp50_vcinc;
   comp121_V0alpha_n  =  params->comp121_V0alpha_n;
   comp88_Bbeta_c  =  params->comp88_Bbeta_c;
   comp155_vchold  =  params->comp155_vchold;
   comp52_Kalpha_b  =  params->comp52_Kalpha_b;
   comp52_Kalpha_a  =  params->comp52_Kalpha_a;
   comp162_ACoff  =  params->comp162_ACoff;
   comp52_gbar  =  params->comp52_gbar;
   comp156_gbar  =  params->comp156_gbar;
   comp87_vcbase  =  params->comp87_vcbase;
   comp120_vchdur  =  params->comp120_vchdur;
   comp22_tp  =  params->comp22_tp;
   comp162_Aepsilon  =  params->comp162_Aepsilon;
   comp23_tauB  =  params->comp23_tauB;
   comp23_tauA  =  params->comp23_tauA;
   comp23_tau2  =  params->comp23_tau2;
   comp23_tau1  =  params->comp23_tau1;
   comp121_V0_ninf  =  params->comp121_V0_ninf;
   comp162_Adelta  =  params->comp162_Adelta;
   comp105_vchold  =  params->comp105_vchold;
   comp105_vchdur  =  params->comp105_vchdur;
   comp24_tau1  =  params->comp24_tau1;
   comp105_vcbase  =  params->comp105_vcbase;
   comp120_vcsteps  =  params->comp120_vcsteps;
   comp121_Kbeta_n  =  params->comp121_Kbeta_n;
   comp24_tau2  =  params->comp24_tau2;
   comp24_tauA  =  params->comp24_tauA;
   comp136_gbar  =  params->comp136_gbar;
   comp106_Kbeta_d  =  params->comp106_Kbeta_d;
   comp24_tauB  =  params->comp24_tauB;
   comp162_Valfa  =  params->comp162_Valfa;
   comp23_tp  =  params->comp23_tp;
   comp52_V0_binf  =  params->comp52_V0_binf;
   comp88_gbar  =  params->comp88_gbar;
   comp135_vcbase  =  params->comp135_vcbase;
   comp135_vcsteps  =  params->comp135_vcsteps;

   v  =  Ith(y,0);
   Kir_m200  =  Ith(y,1);
   KA_h190  =  Ith(y,2);
   KV_m210  =  Ith(y,3);
   CaHVA_m183  =  Ith(y,4);
   CaHVA_h184  =  Ith(y,5);
   comp162_Na_zI1  =  Ith(y,6);
   comp162_Na_zC1  =  Ith(y,7);
   comp162_Na_zI2  =  Ith(y,8);
   comp162_Na_zC2  =  Ith(y,9);
   comp162_Na_zI3  =  Ith(y,10);
   comp162_Na_zC3  =  Ith(y,11);
   comp162_Na_zI4  =  Ith(y,12);
   comp162_Na_zC4  =  Ith(y,13);
   comp162_Na_zI5  =  Ith(y,14);
   comp162_Na_zC5  =  Ith(y,15);
   comp162_Na_zI6  =  Ith(y,16);
   comp162_Na_zO  =  Ith(y,17);
   KA_m189  =  Ith(y,18);
   KCa_m195  =  Ith(y,19);
   KM_m205  =  Ith(y,20);
   comp25_ca  =  Ith(y,21);
   comp24_B  =  Ith(y,22);
   comp24_A  =  Ith(y,23);
   comp22_B  =  Ith(y,24);
   comp22_A  =  Ith(y,25);
   comp23_B  =  Ith(y,26);
   comp23_A  =  Ith(y,27);

   cai  =  comp25_ca;
   comp88_cai  =  cai;
   cao  =  comp25_cao;
   comp26_cao  =  cao;
   comp26_cai  =  cai;
   comp25_cai  =  cai;
   comp26_e  =  (1000.0 * comp26_R * (comp19_celsius + 273.15)) / (2.0 * comp26_F) * log(comp26_cao / comp26_cai);
   i_CaHVA  =  (comp26_gbar * pow(CaHVA_m183, 2.0) * CaHVA_h184) * (v - comp26_e);
   ica  =  i_CaHVA;
   comp25_ica  =  ica;
   if (comp88_cai < 0.0001) {v212  =  0.0001;} else {v212  =  comp88_cai;}; 
comp88_cai1  =  v212;
   comp26_Q10  =  pow(3.0, (comp19_celsius + -20.0) / 10.0);
   KM_m_inf201  =  1.0 / (1.0 + exp(-(v + -(comp121_V0_ninf)) / comp121_B_ninf));
   comp23_g  =  comp23_B + -(comp23_A);
   comp162_Q10  =  pow(3.0, (comp19_celsius + -20.0) / 10.0);
   comp22_g  =  comp22_B + -(comp22_A);
   comp24_g  =  comp24_B + -(comp24_A);
   comp88_Q10  =  pow(3.0, (comp19_celsius + -30.0) / 10.0);
   comp106_Q10  =  pow(3.0, (comp19_celsius + -20.0) / 10.0);
   comp52_b_inf  =  1.0 / (1.0 + exp((v + -(comp52_V0_binf)) / comp52_K_binf));
   comp136_Q10  =  pow(3.0, (comp19_celsius + -6.3) / 10.0);
   comp121_Q10  =  pow(3.0, (comp19_celsius + -22.0) / 10.0);
   comp52_a_inf  =  1.0 / (1.0 + exp((v + -(comp52_V0_ainf)) / comp52_K_ainf));
   comp52_Q10  =  pow(3.0, (comp19_celsius + -25.5) / 10.0);
   KA_h_inf187  =  comp52_b_inf;
   comp88_c_inf  =  (comp88_alpha_c(v, comp88_cai, comp88_Q10, params)) / (comp88_alpha_c(v, comp88_cai, comp88_Q10, params) + comp88_beta_c(v, comp88_cai, comp88_Q10, params));
   comp26_u_inf  =  (comp26_alpha_u(v, comp26_Q10, params)) / (comp26_alpha_u(v, comp26_Q10, params) + comp26_beta_u(v, comp26_Q10, params));
   comp136_tau_n  =  1.0 / (comp136_alpha_n(v, comp136_Q10, params) + comp136_beta_n(v, comp136_Q10, params));
   comp88_tau_c  =  1.0 / (comp88_alpha_c(v, comp88_cai, comp88_Q10, params) + comp88_beta_c(v, comp88_cai, comp88_Q10, params));
   KM_m_tau202  =  1.0 / (comp121_alpha_n(v, comp121_Q10, params) + comp121_beta_n(v, comp121_Q10, params));
   comp162_Con  =  comp162_Q10 * comp162_ACon;
   comp52_tau_b  =  1.0 / (comp52_alpha_b(v, comp52_Q10, params) + comp52_beta_b(v, comp52_Q10, params));
   comp52_tau_a  =  1.0 / (comp52_alpha_a(v, comp52_Q10, params) + comp52_beta_a(v, comp52_Q10, params));
   comp162_delta  =  comp162_Q10 * comp162_Adelta;
   comp26_tau_s  =  1.0 / (comp26_alpha_s(v, comp26_Q10, params) + comp26_beta_s(v, comp26_Q10, params));
   comp26_tau_u  =  1.0 / (comp26_alpha_u(v, comp26_Q10, params) + comp26_beta_u(v, comp26_Q10, params));
   comp26_s_inf  =  (comp26_alpha_s(v, comp26_Q10, params)) / (comp26_alpha_s(v, comp26_Q10, params) + comp26_beta_s(v, comp26_Q10, params));
   KA_m_inf185  =  comp52_a_inf;
   comp162_epsilon  =  comp162_Q10 * comp162_Aepsilon;
   comp162_Ooff  =  comp162_Q10 * comp162_AOoff;
   comp162_Oon  =  comp162_Q10 * comp162_AOon;
   comp106_d_inf  =  (comp106_alpha_d(v, comp106_Q10, params)) / (comp106_alpha_d(v, comp106_Q10, params) + comp106_beta_d(v, comp106_Q10, params));
   comp162_gamma  =  comp162_Q10 * comp162_Agamma;
   comp136_n_inf  =  (comp136_alpha_n(v, comp136_Q10, params)) / (comp136_alpha_n(v, comp136_Q10, params) + comp136_beta_n(v, comp136_Q10, params));
   comp162_Coff  =  comp162_Q10 * comp162_ACoff;
   comp106_tau_d  =  1.0 / (comp106_alpha_d(v, comp106_Q10, params) + comp106_beta_d(v, comp106_Q10, params));
   CaHVA_m_inf179  =  comp26_s_inf;
   CaHVA_h_tau182  =  comp26_tau_u;
   KA_m_tau186  =  comp52_tau_a;
   KCa_m_tau192  =  comp88_tau_c;
   KV_m_inf206  =  comp136_n_inf;
   KA_h_tau188  =  comp52_tau_b;
   Kir_m_tau197  =  comp106_tau_d;
   KCa_m_inf191  =  comp88_c_inf;
   comp162_b  =  pow(comp162_Ooff / comp162_Coff, 1.0 / 4.0);
   comp162_a  =  pow(comp162_Oon / comp162_Con, 1.0 / 4.0);
   CaHVA_h_inf181  =  comp26_u_inf;
   KV_m_tau207  =  comp136_tau_n;
   CaHVA_m_tau180  =  comp26_tau_s;
   Kir_m_inf196  =  comp106_d_inf;
   comp162_Na_z  =  comp162_Na_zO;
   i_Na  =  (comp162_gbar * comp162_Na_z) * (v - comp162_e);
   ina  =  i_Na;
   i_KCa  =  (comp88_gbar * KCa_m195) * (v - comp88_e);
   i_KV  =  (comp136_gbar * pow(KV_m210, 4.0)) * (v - comp136_e);
   i_Kir  =  (comp106_gbar * Kir_m200) * (v - comp106_e);
   i_KM  =  (comp121_gbar * KM_m205) * (v - comp121_e);
   i_KA  =  (comp52_gbar * pow(KA_m189, 3.0) * KA_h190) * (v - comp52_e);
   ik  =  i_KCa + i_KV + i_Kir + i_KM + i_KA;
   i_AMPA  =  (100.0 / (M_PI * comp21_L * comp21_diam)) * comp22_g * (v - comp22_e);
   i_NMDA  =  (100.0 / (M_PI * comp21_L * comp21_diam)) * comp24_g * (v - comp24_e);
   i_GABA  =  (100.0 / (M_PI * comp21_L * comp21_diam)) * comp23_g * (v - comp23_e);
   i_Lkg1  =  comp156_gbar * (v - comp156_e);
   i_Lkg2  =  comp159_ggaba * (v - comp159_egaba);
   i  =  i_AMPA + i_NMDA + i_GABA + i_Lkg1 + i_Lkg2;

   Ith(f,0)  =  ((node.B_.I_stim_) * 100.0 / (M_PI * comp21_L * comp21_diam) + -1000.0 * (ina + ik + i + ica)) / comp20_C_m;
   Ith(f,1)  =  (Kir_m_inf196 + -(Kir_m200)) / Kir_m_tau197;
   Ith(f,2)  =  (KA_h_inf187 + -(KA_h190)) / KA_h_tau188;
   Ith(f,3)  =  (KV_m_inf206 + -(KV_m210)) / KV_m_tau207;
   Ith(f,4)  =  (CaHVA_m_inf179 + -(CaHVA_m183)) / CaHVA_m_tau180;
   Ith(f,5)  =  (CaHVA_h_inf181 + -(CaHVA_h184)) / CaHVA_h_tau182;
   Ith(f,6)  =  -(comp162_Na_zI1 * comp162_Coff + comp162_Na_zI1 * comp162_n1 * comp162_alfa(v, comp162_Q10, params) * comp162_a) + comp162_Na_zC1 * comp162_Con + comp162_Na_zI2 * comp162_n4 * comp162_beta(v, comp162_Q10, params) * comp162_b;
   Ith(f,7)  =  -(comp162_Na_zC1 * comp162_Con + comp162_Na_zC1 * comp162_n1 * comp162_alfa(v, comp162_Q10, params)) + comp162_Na_zI1 * comp162_Coff + comp162_Na_zC2 * comp162_n4 * comp162_beta(v, comp162_Q10, params);
   Ith(f,8)  =  -(comp162_Na_zI2 * comp162_Coff * comp162_b + comp162_Na_zI2 * comp162_n2 * comp162_alfa(v, comp162_Q10, params) * comp162_a + comp162_Na_zI2 * comp162_n4 * comp162_beta(v, comp162_Q10, params) * comp162_b) + comp162_Na_zC2 * comp162_Con * comp162_a + comp162_Na_zI3 * comp162_n3 * comp162_beta(v, comp162_Q10, params) * comp162_b + comp162_Na_zI1 * comp162_n1 * comp162_alfa(v, comp162_Q10, params) * comp162_a;
   Ith(f,9)  =  -(comp162_Na_zC2 * comp162_Con * comp162_a + comp162_Na_zC2 * comp162_n2 * comp162_alfa(v, comp162_Q10, params) + comp162_Na_zC2 * comp162_n4 * comp162_beta(v, comp162_Q10, params)) + comp162_Na_zI2 * comp162_Coff * comp162_b + comp162_Na_zC3 * comp162_n3 * comp162_beta(v, comp162_Q10, params) + comp162_Na_zC1 * comp162_n1 * comp162_alfa(v, comp162_Q10, params);
   Ith(f,10)  =  -(comp162_Na_zI3 * comp162_Coff * pow(comp162_b, 2.0) + comp162_Na_zI3 * comp162_n3 * comp162_alfa(v, comp162_Q10, params) * comp162_a + comp162_Na_zI3 * comp162_n3 * comp162_beta(v, comp162_Q10, params) * comp162_b) + comp162_Na_zC3 * comp162_Con * pow(comp162_a, 2.0) + comp162_Na_zI4 * comp162_n2 * comp162_beta(v, comp162_Q10, params) * comp162_b + comp162_Na_zI2 * comp162_n2 * comp162_alfa(v, comp162_Q10, params) * comp162_a;
   Ith(f,11)  =  -(comp162_Na_zC3 * comp162_Con * pow(comp162_a, 2.0) + comp162_Na_zC3 * comp162_n3 * comp162_alfa(v, comp162_Q10, params) + comp162_Na_zC3 * comp162_n3 * comp162_beta(v, comp162_Q10, params)) + comp162_Na_zI3 * comp162_Coff * pow(comp162_b, 2.0) + comp162_Na_zC4 * comp162_n2 * comp162_beta(v, comp162_Q10, params) + comp162_Na_zC2 * comp162_n2 * comp162_alfa(v, comp162_Q10, params);
   Ith(f,12)  =  -(comp162_Na_zI4 * comp162_Coff * pow(comp162_b, 3.0) + comp162_Na_zI4 * comp162_n4 * comp162_alfa(v, comp162_Q10, params) * comp162_a + comp162_Na_zI4 * comp162_n2 * comp162_beta(v, comp162_Q10, params) * comp162_b) + comp162_Na_zC4 * comp162_Con * pow(comp162_a, 3.0) + comp162_Na_zI5 * comp162_n1 * comp162_beta(v, comp162_Q10, params) * comp162_b + comp162_Na_zI3 * comp162_n3 * comp162_alfa(v, comp162_Q10, params) * comp162_a;
   Ith(f,13)  =  -(comp162_Na_zC4 * comp162_Con * pow(comp162_a, 3.0) + comp162_Na_zC4 * comp162_n4 * comp162_alfa(v, comp162_Q10, params) + comp162_Na_zC4 * comp162_n2 * comp162_beta(v, comp162_Q10, params)) + comp162_Na_zI4 * comp162_Coff * pow(comp162_b, 3.0) + comp162_Na_zC5 * comp162_n1 * comp162_beta(v, comp162_Q10, params) + comp162_Na_zC3 * comp162_n3 * comp162_alfa(v, comp162_Q10, params);
   Ith(f,14)  =  -(comp162_Na_zI5 * comp162_Coff * pow(comp162_b, 4.0) + comp162_Na_zI5 * comp162_gamma + comp162_Na_zI5 * comp162_n1 * comp162_beta(v, comp162_Q10, params) * comp162_b) + comp162_Na_zC5 * comp162_Con * pow(comp162_a, 4.0) + comp162_Na_zI6 * comp162_delta + comp162_Na_zI4 * comp162_n4 * comp162_alfa(v, comp162_Q10, params) * comp162_a;
   Ith(f,15)  =  -(comp162_Na_zC5 * comp162_Con * pow(comp162_a, 4.0) + comp162_Na_zC5 * comp162_gamma + comp162_Na_zC5 * comp162_n1 * comp162_beta(v, comp162_Q10, params)) + comp162_Na_zI5 * comp162_Coff * pow(comp162_b, 4.0) + comp162_Na_zO * comp162_delta + comp162_Na_zC4 * comp162_n4 * comp162_alfa(v, comp162_Q10, params);
   Ith(f,16)  =  -(comp162_Na_zI6 * comp162_Ooff + comp162_Na_zI6 * comp162_delta) + comp162_Na_zO * comp162_Oon + comp162_Na_zI5 * comp162_gamma;
   v214  =  comp162_Na_zI6 + comp162_Na_zI5 + comp162_Na_zI4 + comp162_Na_zI3 + comp162_Na_zI2 + comp162_Na_zI1 + comp162_Na_zO + comp162_Na_zC5 + comp162_Na_zC4 + comp162_Na_zC3 + comp162_Na_zC2 + comp162_Na_zC1;; 
Ith(f,17)  =  -(comp162_Na_zO * comp162_Oon + comp162_Na_zO * comp162_epsilon + comp162_Na_zO * comp162_delta) + comp162_Na_zI6 * comp162_Ooff + (1.0 - v214) * (comp162_teta(v, comp162_Q10, params)) + comp162_Na_zC5 * comp162_gamma;
   Ith(f,18)  =  (KA_m_inf185 + -(KA_m189)) / KA_m_tau186;
   Ith(f,19)  =  (KCa_m_inf191 + -(KCa_m195)) / KCa_m_tau192;
   Ith(f,20)  =  (KM_m_inf201 + -(KM_m205)) / KM_m_tau202;
   if (comp25_ca < comp25_cai0) 
      {if215  =  comp25_cai0;} 
      else 
        {if215  =  comp25_ca;}; 
Ith(f,21)  =  (-(comp25_ica)) / (2.0 * comp25_F * comp25_d) * 10000.0 + -(comp25_beta * (if215 + -(comp25_cai0)));
   Ith(f,22)  =  -(comp24_B) / comp24_tau2;
   Ith(f,23)  =  -(comp24_A) / comp24_tau1;
   Ith(f,24)  =  -(comp22_B) / comp22_tau2;
   Ith(f,25)  =  -(comp22_A) / comp22_tau1;
   Ith(f,26)  =  -(comp23_B) / comp23_tau2;
   Ith(f,27)  =  -(comp23_A) / comp23_tau1;

   return 0;

}




extern "C" int Granule_residual (double t, N_Vector y, N_Vector yp, N_Vector f, void* pnode)
{
   int status; 

   // cast the node ptr to an object of the proper type
   assert(pnode);
   const Granule & node =  *(reinterpret_cast<Granule*>(pnode));
   Granule & vnode =  *(reinterpret_cast<Granule*>(pnode));

   N_Vector y1 = vnode.B_.y1;
             
   status = Granule_dynamics (t, y, y1, pnode);

      Ith(f,0)  =  Ith(y1,0) - Ith(yp,0);
      Ith(f,1)  =  Ith(y1,1) - Ith(yp,1);
      Ith(f,2)  =  Ith(y1,2) - Ith(yp,2);
      Ith(f,3)  =  Ith(y1,3) - Ith(yp,3);
      Ith(f,4)  =  Ith(y1,4) - Ith(yp,4);
      Ith(f,5)  =  Ith(y1,5) - Ith(yp,5);
      Ith(f,6)  =  Ith(y1,6) - Ith(yp,6);
      Ith(f,7)  =  Ith(y1,7) - Ith(yp,7);
      Ith(f,8)  =  Ith(y1,8) - Ith(yp,8);
      Ith(f,9)  =  Ith(y1,9) - Ith(yp,9);
      Ith(f,10)  =  Ith(y1,10) - Ith(yp,10);
      Ith(f,11)  =  Ith(y1,11) - Ith(yp,11);
      Ith(f,12)  =  Ith(y1,12) - Ith(yp,12);
      Ith(f,13)  =  Ith(y1,13) - Ith(yp,13);
      Ith(f,14)  =  Ith(y1,14) - Ith(yp,14);
      Ith(f,15)  =  Ith(y1,15) - Ith(yp,15);
      Ith(f,16)  =  Ith(y1,16) - Ith(yp,16);
      Ith(f,17)  =  Ith(y1,17) - Ith(yp,17);
      Ith(f,18)  =  Ith(y1,18) - Ith(yp,18);
      Ith(f,19)  =  Ith(y1,19) - Ith(yp,19);
      Ith(f,20)  =  Ith(y1,20) - Ith(yp,20);
      Ith(f,21)  =  Ith(y1,21) - Ith(yp,21);
      Ith(f,22)  =  Ith(y1,22) - Ith(yp,22);
      Ith(f,23)  =  Ith(y1,23) - Ith(yp,23);
      Ith(f,24)  =  Ith(y1,24) - Ith(yp,24);
      Ith(f,25)  =  Ith(y1,25) - Ith(yp,25);
      Ith(f,26)  =  Ith(y1,26) - Ith(yp,26);
      Ith(f,27)  =  Ith(y1,27) - Ith(yp,27);
   
   return status;
}




extern "C" int Granule_steadystate (const gsl_vector *u, void *pnode, gsl_vector *f)
{
   double v212, comp25_ca, cai, comp88_cai, comp25_cao, cao, comp26_cao, comp26_cai, comp25_cai, ica, comp25_ica, comp88_cai1, comp19_celsius, comp26_Q10, comp121_B_ninf, comp121_V0_ninf, v, KM_m_inf201, comp23_A, comp23_B, comp23_g, comp162_Q10, comp22_A, comp22_B, comp22_g, comp24_A, comp24_B, comp24_g, comp88_Q10, comp106_Q10, comp52_K_binf, comp52_V0_binf, comp52_b_inf, comp136_Q10, comp121_Q10, comp52_K_ainf, comp52_V0_ainf, comp52_a_inf, comp26_F, comp26_R, comp26_e, comp52_Q10, KA_h_inf187, comp88_c_inf, comp26_u_inf, comp136_tau_n, comp88_tau_c, KM_m_tau202, comp162_ACon, comp162_Con, comp52_tau_b, comp52_tau_a, comp162_Adelta, comp162_delta, comp26_tau_s, comp26_tau_u, comp26_s_inf, KA_m_inf185, comp162_Aepsilon, comp162_epsilon, comp162_AOoff, comp162_Ooff, comp162_AOon, comp162_Oon, comp106_d_inf, comp162_Agamma, comp162_gamma, comp136_n_inf, comp162_ACoff, comp162_Coff, comp106_tau_d, CaHVA_m_inf179, CaHVA_h_tau182, KA_m_tau186, KCa_m_tau192, KV_m_inf206, KA_h_tau188, Kir_m_tau197, KCa_m_inf191, comp162_b, comp162_a, CaHVA_h_inf181, KV_m_tau207, CaHVA_m_tau180, Kir_m_inf196, KM_m205, Kir_m200, KA_h190, KV_m210, CaHVA_m183, CaHVA_h184, KA_m189, KCa_m195, i_Na, ina, i_KCa, i_KV, i_Kir, i_KM, i_KA, ik, i_CaHVA, i_AMPA, i_NMDA, i_GABA, i_Lkg1, i_Lkg2, i, comp162_Na_zO, comp162_Na_zI6, comp162_Na_zC5, comp162_Na_zI5, comp162_Na_zC4, comp162_Na_zI4, comp162_Na_zC3, comp162_Na_zI3, comp162_Na_zC2, comp162_Na_zI2, comp162_Na_zC1, comp162_Na_zI1, comp162_Vteta, comp121_Kalpha_n, comp135_vcbdur, comp136_V0beta_n, comp50_vchold, comp135_vchold, comp121_V0beta_n, comp156_e, comp20_C_m, comp52_V0beta_b, comp52_V0beta_a, comp159_ggaba, comp87_vchdur, comp88_Aalpha_c, comp178_vcbase, comp135_vcinc, comp88_Abeta_c, comp136_Kbeta_n, comp22_tauA, comp50_vcbase, comp87_vchold, comp22_tauB, comp21_L, comp22_tau1, comp136_Kalpha_n, comp22_tau2, comp87_vcsteps, comp26_V0beta_u, comp26_V0beta_s, comp121_Aalpha_n, comp120_vcbase, comp52_Aalpha_b, comp105_cnbase, comp52_Aalpha_a, comp106_Kalpha_d, comp25_d, comp155_vcinc, comp25_F, comp23_scale_factor, comp136_Aalpha_n, comp162_e, comp178_vcsteps, comp26_Aalpha_u, comp26_Aalpha_s, comp105_cnout, comp21_diam, comp135_vchdur, comp50_cnout, comp178_vcbdur, comp26_Kalpha_s, comp26_Kalpha_u, comp26_Kbeta_s, comp19_Ra, comp26_Kbeta_u, comp159_egaba, comp106_e, comp52_Kbeta_b, comp52_Kbeta_a, comp136_Abeta_n, comp52_V0alpha_b, comp136_e, comp52_V0alpha_a, comp105_vcsteps, comp178_vchdur, comp50_cn, comp26_V0alpha_u, comp162_Abeta, comp26_V0alpha_s, comp120_vchold, comp105_cnsteps, comp162_Vbeta, comp88_Balpha_c, comp24_scale_factor, comp105_vcinc, comp52_Abeta_b, comp52_Abeta_a, comp87_vcbdur, comp87_vcinc, comp136_V0alpha_n, comp178_vchold, comp105_cninc, comp162_n2, comp162_n1, comp162_n4, comp121_Abeta_n, comp162_n3, comp26_Abeta_u, comp26_Abeta_s, comp52_e, comp155_vcsteps, comp162_Aalfa, comp178_vcinc, comp88_Kbeta_c, comp155_vchdur, comp105_cnhold, comp121_e, comp88_Kalpha_c, comp19_V_t, comp120_vcbdur, comp24_e, comp22_e, comp106_V0alpha_d, comp22_scale_factor, comp50_vchdur, comp106_gbar, comp25_beta, comp162_gbar, comp105_vcbdur, comp106_V0beta_d, comp50_vcsteps, comp106_Abeta_d, comp24_tp, comp120_vcinc, comp162_Ateta, comp155_vcbase, comp50_vcbdur, comp88_e, comp26_gbar, comp121_gbar, comp25_cai0, comp106_Aalpha_d, comp155_vcbdur, comp23_e, comp50_vcinc, comp121_V0alpha_n, comp88_Bbeta_c, comp155_vchold, comp52_Kalpha_b, comp52_Kalpha_a, comp52_gbar, comp156_gbar, comp87_vcbase, comp120_vchdur, comp22_tp, comp23_tauB, comp23_tauA, comp23_tau2, comp23_tau1, comp105_vchold, comp105_vchdur, comp24_tau1, comp105_vcbase, comp120_vcsteps, comp121_Kbeta_n, comp24_tau2, comp24_tauA, comp136_gbar, comp106_Kbeta_d, comp24_tauB, comp162_Valfa, comp23_tp, comp88_gbar, comp135_vcbase, comp135_vcsteps, comp162_Na_z;

   // params is a reference to the model parameters
   const struct Granule::Parameters_ *params = (struct ~A::Parameters_ *)pnode;

   comp162_Vteta  =  params->comp162_Vteta;
   comp121_Kalpha_n  =  params->comp121_Kalpha_n;
   comp135_vcbdur  =  params->comp135_vcbdur;
   comp136_V0beta_n  =  params->comp136_V0beta_n;
   comp50_vchold  =  params->comp50_vchold;
   comp162_Agamma  =  params->comp162_Agamma;
   comp135_vchold  =  params->comp135_vchold;
   comp121_V0beta_n  =  params->comp121_V0beta_n;
   comp156_e  =  params->comp156_e;
   comp20_C_m  =  params->comp20_C_m;
   comp52_V0beta_b  =  params->comp52_V0beta_b;
   comp52_V0beta_a  =  params->comp52_V0beta_a;
   comp159_ggaba  =  params->comp159_ggaba;
   comp162_ACon  =  params->comp162_ACon;
   comp87_vchdur  =  params->comp87_vchdur;
   comp88_Aalpha_c  =  params->comp88_Aalpha_c;
   comp178_vcbase  =  params->comp178_vcbase;
   comp135_vcinc  =  params->comp135_vcinc;
   comp88_Abeta_c  =  params->comp88_Abeta_c;
   comp136_Kbeta_n  =  params->comp136_Kbeta_n;
   comp22_tauA  =  params->comp22_tauA;
   comp50_vcbase  =  params->comp50_vcbase;
   comp87_vchold  =  params->comp87_vchold;
   comp22_tauB  =  params->comp22_tauB;
   comp21_L  =  params->comp21_L;
   comp22_tau1  =  params->comp22_tau1;
   comp136_Kalpha_n  =  params->comp136_Kalpha_n;
   comp22_tau2  =  params->comp22_tau2;
   comp52_K_binf  =  params->comp52_K_binf;
   comp87_vcsteps  =  params->comp87_vcsteps;
   comp26_V0beta_u  =  params->comp26_V0beta_u;
   comp26_V0beta_s  =  params->comp26_V0beta_s;
   comp121_Aalpha_n  =  params->comp121_Aalpha_n;
   comp120_vcbase  =  params->comp120_vcbase;
   comp25_cao  =  params->comp25_cao;
   comp52_Aalpha_b  =  params->comp52_Aalpha_b;
   comp105_cnbase  =  params->comp105_cnbase;
   comp52_Aalpha_a  =  params->comp52_Aalpha_a;
   comp106_Kalpha_d  =  params->comp106_Kalpha_d;
   comp25_d  =  params->comp25_d;
   comp155_vcinc  =  params->comp155_vcinc;
   comp25_F  =  params->comp25_F;
   comp23_scale_factor  =  params->comp23_scale_factor;
   comp136_Aalpha_n  =  params->comp136_Aalpha_n;
   comp162_e  =  params->comp162_e;
   comp178_vcsteps  =  params->comp178_vcsteps;
   comp26_R  =  params->comp26_R;
   comp26_Aalpha_u  =  params->comp26_Aalpha_u;
   comp26_Aalpha_s  =  params->comp26_Aalpha_s;
   comp105_cnout  =  params->comp105_cnout;
   comp21_diam  =  params->comp21_diam;
   comp135_vchdur  =  params->comp135_vchdur;
   comp26_F  =  params->comp26_F;
   comp50_cnout  =  params->comp50_cnout;
   comp178_vcbdur  =  params->comp178_vcbdur;
   comp26_Kalpha_s  =  params->comp26_Kalpha_s;
   comp26_Kalpha_u  =  params->comp26_Kalpha_u;
   comp26_Kbeta_s  =  params->comp26_Kbeta_s;
   comp19_Ra  =  params->comp19_Ra;
   comp26_Kbeta_u  =  params->comp26_Kbeta_u;
   comp159_egaba  =  params->comp159_egaba;
   comp106_e  =  params->comp106_e;
   comp52_Kbeta_b  =  params->comp52_Kbeta_b;
   comp52_Kbeta_a  =  params->comp52_Kbeta_a;
   comp162_AOoff  =  params->comp162_AOoff;
   comp162_AOon  =  params->comp162_AOon;
   comp136_Abeta_n  =  params->comp136_Abeta_n;
   comp52_V0alpha_b  =  params->comp52_V0alpha_b;
   comp136_e  =  params->comp136_e;
   comp52_V0alpha_a  =  params->comp52_V0alpha_a;
   comp105_vcsteps  =  params->comp105_vcsteps;
   comp178_vchdur  =  params->comp178_vchdur;
   comp50_cn  =  params->comp50_cn;
   comp26_V0alpha_u  =  params->comp26_V0alpha_u;
   comp162_Abeta  =  params->comp162_Abeta;
   comp26_V0alpha_s  =  params->comp26_V0alpha_s;
   comp120_vchold  =  params->comp120_vchold;
   comp105_cnsteps  =  params->comp105_cnsteps;
   comp162_Vbeta  =  params->comp162_Vbeta;
   comp88_Balpha_c  =  params->comp88_Balpha_c;
   comp24_scale_factor  =  params->comp24_scale_factor;
   comp52_K_ainf  =  params->comp52_K_ainf;
   comp105_vcinc  =  params->comp105_vcinc;
   comp52_Abeta_b  =  params->comp52_Abeta_b;
   comp52_Abeta_a  =  params->comp52_Abeta_a;
   comp87_vcbdur  =  params->comp87_vcbdur;
   comp87_vcinc  =  params->comp87_vcinc;
   comp136_V0alpha_n  =  params->comp136_V0alpha_n;
   comp178_vchold  =  params->comp178_vchold;
   comp105_cninc  =  params->comp105_cninc;
   comp162_n2  =  params->comp162_n2;
   comp162_n1  =  params->comp162_n1;
   comp162_n4  =  params->comp162_n4;
   comp121_Abeta_n  =  params->comp121_Abeta_n;
   comp162_n3  =  params->comp162_n3;
   comp26_Abeta_u  =  params->comp26_Abeta_u;
   comp26_Abeta_s  =  params->comp26_Abeta_s;
   comp52_e  =  params->comp52_e;
   comp52_V0_ainf  =  params->comp52_V0_ainf;
   comp155_vcsteps  =  params->comp155_vcsteps;
   comp162_Aalfa  =  params->comp162_Aalfa;
   comp178_vcinc  =  params->comp178_vcinc;
   comp88_Kbeta_c  =  params->comp88_Kbeta_c;
   comp155_vchdur  =  params->comp155_vchdur;
   comp105_cnhold  =  params->comp105_cnhold;
   comp121_e  =  params->comp121_e;
   comp88_Kalpha_c  =  params->comp88_Kalpha_c;
   comp19_V_t  =  params->comp19_V_t;
   comp120_vcbdur  =  params->comp120_vcbdur;
   comp24_e  =  params->comp24_e;
   comp22_e  =  params->comp22_e;
   comp106_V0alpha_d  =  params->comp106_V0alpha_d;
   comp121_B_ninf  =  params->comp121_B_ninf;
   comp22_scale_factor  =  params->comp22_scale_factor;
   comp50_vchdur  =  params->comp50_vchdur;
   comp106_gbar  =  params->comp106_gbar;
   comp25_beta  =  params->comp25_beta;
   comp19_celsius  =  params->comp19_celsius;
   comp162_gbar  =  params->comp162_gbar;
   comp105_vcbdur  =  params->comp105_vcbdur;
   comp106_V0beta_d  =  params->comp106_V0beta_d;
   comp50_vcsteps  =  params->comp50_vcsteps;
   comp106_Abeta_d  =  params->comp106_Abeta_d;
   comp24_tp  =  params->comp24_tp;
   comp120_vcinc  =  params->comp120_vcinc;
   comp162_Ateta  =  params->comp162_Ateta;
   comp155_vcbase  =  params->comp155_vcbase;
   comp50_vcbdur  =  params->comp50_vcbdur;
   comp88_e  =  params->comp88_e;
   comp26_gbar  =  params->comp26_gbar;
   comp121_gbar  =  params->comp121_gbar;
   comp25_cai0  =  params->comp25_cai0;
   comp106_Aalpha_d  =  params->comp106_Aalpha_d;
   comp155_vcbdur  =  params->comp155_vcbdur;
   comp23_e  =  params->comp23_e;
   comp50_vcinc  =  params->comp50_vcinc;
   comp121_V0alpha_n  =  params->comp121_V0alpha_n;
   comp88_Bbeta_c  =  params->comp88_Bbeta_c;
   comp155_vchold  =  params->comp155_vchold;
   comp52_Kalpha_b  =  params->comp52_Kalpha_b;
   comp52_Kalpha_a  =  params->comp52_Kalpha_a;
   comp162_ACoff  =  params->comp162_ACoff;
   comp52_gbar  =  params->comp52_gbar;
   comp156_gbar  =  params->comp156_gbar;
   comp87_vcbase  =  params->comp87_vcbase;
   comp120_vchdur  =  params->comp120_vchdur;
   comp22_tp  =  params->comp22_tp;
   comp162_Aepsilon  =  params->comp162_Aepsilon;
   comp23_tauB  =  params->comp23_tauB;
   comp23_tauA  =  params->comp23_tauA;
   comp23_tau2  =  params->comp23_tau2;
   comp23_tau1  =  params->comp23_tau1;
   comp121_V0_ninf  =  params->comp121_V0_ninf;
   comp162_Adelta  =  params->comp162_Adelta;
   comp105_vchold  =  params->comp105_vchold;
   comp105_vchdur  =  params->comp105_vchdur;
   comp24_tau1  =  params->comp24_tau1;
   comp105_vcbase  =  params->comp105_vcbase;
   comp120_vcsteps  =  params->comp120_vcsteps;
   comp121_Kbeta_n  =  params->comp121_Kbeta_n;
   comp24_tau2  =  params->comp24_tau2;
   comp24_tauA  =  params->comp24_tauA;
   comp136_gbar  =  params->comp136_gbar;
   comp106_Kbeta_d  =  params->comp106_Kbeta_d;
   comp24_tauB  =  params->comp24_tauB;
   comp162_Valfa  =  params->comp162_Valfa;
   comp23_tp  =  params->comp23_tp;
   comp52_V0_binf  =  params->comp52_V0_binf;
   comp88_gbar  =  params->comp88_gbar;
   comp135_vcbase  =  params->comp135_vcbase;
   comp135_vcsteps  =  params->comp135_vcsteps;


   comp162_Na_zI1  =  gsl_vector_get (u, 0);
   comp162_Na_zC1  =  gsl_vector_get (u, 1);
   comp162_Na_zI2  =  gsl_vector_get (u, 2);
   comp162_Na_zC2  =  gsl_vector_get (u, 3);
   comp162_Na_zI3  =  gsl_vector_get (u, 4);
   comp162_Na_zC3  =  gsl_vector_get (u, 5);
   comp162_Na_zI4  =  gsl_vector_get (u, 6);
   comp162_Na_zC4  =  gsl_vector_get (u, 7);
   comp162_Na_zI5  =  gsl_vector_get (u, 8);
   comp162_Na_zC5  =  gsl_vector_get (u, 9);
   comp162_Na_zI6  =  gsl_vector_get (u, 10);
   comp162_Na_zO  =  gsl_vector_get (u, 11);

   i_Na  =  0.0;
   ina  =  0.0;
   i_KCa  =  0.0;
   i_KV  =  0.0;
   i_Kir  =  0.0;
   i_KM  =  0.0;
   i_KA  =  0.0;
   ik  =  0.0;
   i_CaHVA  =  0.0;
   ica  =  0.0;
   i_AMPA  =  0.0;
   i_NMDA  =  0.0;
   i_GABA  =  0.0;
   i_Lkg1  =  0.0;
   i_Lkg2  =  0.0;
   i  =  0.0;

   comp25_ca  =  0.0001;
   cai  =  comp25_ca;
   comp88_cai  =  cai;
   cao  =  comp25_cao;
   comp26_cao  =  cao;
   comp26_cai  =  cai;
   comp25_cai  =  cai;
   comp25_ica  =  ica;
   if (comp88_cai < 0.0001) {v212  =  0.0001;} else {v212  =  comp88_cai;}; 
comp88_cai1  =  v212;
   comp26_Q10  =  pow(3.0, (comp19_celsius + -20.0) / 10.0);
   v  =  -65.0;
   KM_m_inf201  =  1.0 / (1.0 + exp(-(v + -(comp121_V0_ninf)) / comp121_B_ninf));
   comp23_A  =  0.0;
   comp23_B  =  0.0;
   comp23_g  =  comp23_B + -(comp23_A);
   comp162_Q10  =  pow(3.0, (comp19_celsius + -20.0) / 10.0);
   comp22_A  =  0.0;
   comp22_B  =  0.0;
   comp22_g  =  comp22_B + -(comp22_A);
   comp24_A  =  0.0;
   comp24_B  =  0.0;
   comp24_g  =  comp24_B + -(comp24_A);
   comp88_Q10  =  pow(3.0, (comp19_celsius + -30.0) / 10.0);
   comp106_Q10  =  pow(3.0, (comp19_celsius + -20.0) / 10.0);
   comp52_b_inf  =  1.0 / (1.0 + exp((v + -(comp52_V0_binf)) / comp52_K_binf));
   comp136_Q10  =  pow(3.0, (comp19_celsius + -6.3) / 10.0);
   comp121_Q10  =  pow(3.0, (comp19_celsius + -22.0) / 10.0);
   comp52_a_inf  =  1.0 / (1.0 + exp((v + -(comp52_V0_ainf)) / comp52_K_ainf));
   comp26_e  =  (1000.0 * comp26_R * (comp19_celsius + 273.15)) / (2.0 * comp26_F) * log(comp26_cao / comp26_cai);
   comp52_Q10  =  pow(3.0, (comp19_celsius + -25.5) / 10.0);
   KA_h_inf187  =  comp52_b_inf;
   comp88_c_inf  =  (comp88_alpha_c(v, comp88_cai, comp88_Q10, params)) / (comp88_alpha_c(v, comp88_cai, comp88_Q10, params) + comp88_beta_c(v, comp88_cai, comp88_Q10, params));
   comp26_u_inf  =  (comp26_alpha_u(v, comp26_Q10, params)) / (comp26_alpha_u(v, comp26_Q10, params) + comp26_beta_u(v, comp26_Q10, params));
   comp136_tau_n  =  1.0 / (comp136_alpha_n(v, comp136_Q10, params) + comp136_beta_n(v, comp136_Q10, params));
   comp88_tau_c  =  1.0 / (comp88_alpha_c(v, comp88_cai, comp88_Q10, params) + comp88_beta_c(v, comp88_cai, comp88_Q10, params));
   KM_m_tau202  =  1.0 / (comp121_alpha_n(v, comp121_Q10, params) + comp121_beta_n(v, comp121_Q10, params));
   comp162_Con  =  comp162_Q10 * comp162_ACon;
   comp52_tau_b  =  1.0 / (comp52_alpha_b(v, comp52_Q10, params) + comp52_beta_b(v, comp52_Q10, params));
   comp52_tau_a  =  1.0 / (comp52_alpha_a(v, comp52_Q10, params) + comp52_beta_a(v, comp52_Q10, params));
   comp162_delta  =  comp162_Q10 * comp162_Adelta;
   comp26_tau_s  =  1.0 / (comp26_alpha_s(v, comp26_Q10, params) + comp26_beta_s(v, comp26_Q10, params));
   comp26_tau_u  =  1.0 / (comp26_alpha_u(v, comp26_Q10, params) + comp26_beta_u(v, comp26_Q10, params));
   comp26_s_inf  =  (comp26_alpha_s(v, comp26_Q10, params)) / (comp26_alpha_s(v, comp26_Q10, params) + comp26_beta_s(v, comp26_Q10, params));
   KA_m_inf185  =  comp52_a_inf;
   comp162_epsilon  =  comp162_Q10 * comp162_Aepsilon;
   comp162_Ooff  =  comp162_Q10 * comp162_AOoff;
   comp162_Oon  =  comp162_Q10 * comp162_AOon;
   comp106_d_inf  =  (comp106_alpha_d(v, comp106_Q10, params)) / (comp106_alpha_d(v, comp106_Q10, params) + comp106_beta_d(v, comp106_Q10, params));
   comp162_gamma  =  comp162_Q10 * comp162_Agamma;
   comp136_n_inf  =  (comp136_alpha_n(v, comp136_Q10, params)) / (comp136_alpha_n(v, comp136_Q10, params) + comp136_beta_n(v, comp136_Q10, params));
   comp162_Coff  =  comp162_Q10 * comp162_ACoff;
   comp106_tau_d  =  1.0 / (comp106_alpha_d(v, comp106_Q10, params) + comp106_beta_d(v, comp106_Q10, params));
   CaHVA_m_inf179  =  comp26_s_inf;
   CaHVA_h_tau182  =  comp26_tau_u;
   KA_m_tau186  =  comp52_tau_a;
   KCa_m_tau192  =  comp88_tau_c;
   KV_m_inf206  =  comp136_n_inf;
   KA_h_tau188  =  comp52_tau_b;
   Kir_m_tau197  =  comp106_tau_d;
   KCa_m_inf191  =  comp88_c_inf;
   comp162_b  =  pow(comp162_Ooff / comp162_Coff, 1.0 / 4.0);
   comp162_a  =  pow(comp162_Oon / comp162_Con, 1.0 / 4.0);
   CaHVA_h_inf181  =  comp26_u_inf;
   KV_m_tau207  =  comp136_tau_n;
   CaHVA_m_tau180  =  comp26_tau_s;
   Kir_m_inf196  =  comp106_d_inf;
   KM_m205  =  1.0 / (1.0 + exp(-(v + -(comp121_V0_ninf)) / comp121_B_ninf));
   Kir_m200  =  comp106_d_inf;
   KA_h190  =  1.0 / (1.0 + exp((v + -(comp52_V0_binf)) / comp52_K_binf));
   KV_m210  =  comp136_n_inf;
   CaHVA_m183  =  comp26_s_inf;
   CaHVA_h184  =  comp26_u_inf;
   KA_m189  =  1.0 / (1.0 + exp((v + -(comp52_V0_ainf)) / comp52_K_ainf));
   KCa_m195  =  comp88_c_inf;

   double t227;


   t227  =  -(comp162_Na_zI1 * comp162_Coff + comp162_Na_zI1 * comp162_n1 * comp162_alfa(v, comp162_Q10, params) * comp162_a) + comp162_Na_zC1 * comp162_Con + comp162_Na_zI2 * comp162_n4 * comp162_beta(v, comp162_Q10, params) * comp162_b;
   gsl_vector_set (f,0,t227);

   double t226;


   t226  =  -(comp162_Na_zC1 * comp162_Con + comp162_Na_zC1 * comp162_n1 * comp162_alfa(v, comp162_Q10, params)) + comp162_Na_zI1 * comp162_Coff + comp162_Na_zC2 * comp162_n4 * comp162_beta(v, comp162_Q10, params);
   gsl_vector_set (f,1,t226);

   double t225;


   t225  =  -(comp162_Na_zI2 * comp162_Coff * comp162_b + comp162_Na_zI2 * comp162_n2 * comp162_alfa(v, comp162_Q10, params) * comp162_a + comp162_Na_zI2 * comp162_n4 * comp162_beta(v, comp162_Q10, params) * comp162_b) + comp162_Na_zC2 * comp162_Con * comp162_a + comp162_Na_zI3 * comp162_n3 * comp162_beta(v, comp162_Q10, params) * comp162_b + comp162_Na_zI1 * comp162_n1 * comp162_alfa(v, comp162_Q10, params) * comp162_a;
   gsl_vector_set (f,2,t225);

   double t224;


   t224  =  -(comp162_Na_zC2 * comp162_Con * comp162_a + comp162_Na_zC2 * comp162_n2 * comp162_alfa(v, comp162_Q10, params) + comp162_Na_zC2 * comp162_n4 * comp162_beta(v, comp162_Q10, params)) + comp162_Na_zI2 * comp162_Coff * comp162_b + comp162_Na_zC3 * comp162_n3 * comp162_beta(v, comp162_Q10, params) + comp162_Na_zC1 * comp162_n1 * comp162_alfa(v, comp162_Q10, params);
   gsl_vector_set (f,3,t224);

   double t223;


   t223  =  -(comp162_Na_zI3 * comp162_Coff * pow(comp162_b, 2.0) + comp162_Na_zI3 * comp162_n3 * comp162_alfa(v, comp162_Q10, params) * comp162_a + comp162_Na_zI3 * comp162_n3 * comp162_beta(v, comp162_Q10, params) * comp162_b) + comp162_Na_zC3 * comp162_Con * pow(comp162_a, 2.0) + comp162_Na_zI4 * comp162_n2 * comp162_beta(v, comp162_Q10, params) * comp162_b + comp162_Na_zI2 * comp162_n2 * comp162_alfa(v, comp162_Q10, params) * comp162_a;
   gsl_vector_set (f,4,t223);

   double t222;


   t222  =  -(comp162_Na_zC3 * comp162_Con * pow(comp162_a, 2.0) + comp162_Na_zC3 * comp162_n3 * comp162_alfa(v, comp162_Q10, params) + comp162_Na_zC3 * comp162_n3 * comp162_beta(v, comp162_Q10, params)) + comp162_Na_zI3 * comp162_Coff * pow(comp162_b, 2.0) + comp162_Na_zC4 * comp162_n2 * comp162_beta(v, comp162_Q10, params) + comp162_Na_zC2 * comp162_n2 * comp162_alfa(v, comp162_Q10, params);
   gsl_vector_set (f,5,t222);

   double t221;


   t221  =  -(comp162_Na_zI4 * comp162_Coff * pow(comp162_b, 3.0) + comp162_Na_zI4 * comp162_n4 * comp162_alfa(v, comp162_Q10, params) * comp162_a + comp162_Na_zI4 * comp162_n2 * comp162_beta(v, comp162_Q10, params) * comp162_b) + comp162_Na_zC4 * comp162_Con * pow(comp162_a, 3.0) + comp162_Na_zI5 * comp162_n1 * comp162_beta(v, comp162_Q10, params) * comp162_b + comp162_Na_zI3 * comp162_n3 * comp162_alfa(v, comp162_Q10, params) * comp162_a;
   gsl_vector_set (f,6,t221);

   double t220;


   t220  =  -(comp162_Na_zC4 * comp162_Con * pow(comp162_a, 3.0) + comp162_Na_zC4 * comp162_n4 * comp162_alfa(v, comp162_Q10, params) + comp162_Na_zC4 * comp162_n2 * comp162_beta(v, comp162_Q10, params)) + comp162_Na_zI4 * comp162_Coff * pow(comp162_b, 3.0) + comp162_Na_zC5 * comp162_n1 * comp162_beta(v, comp162_Q10, params) + comp162_Na_zC3 * comp162_n3 * comp162_alfa(v, comp162_Q10, params);
   gsl_vector_set (f,7,t220);

   double t219;


   t219  =  -(comp162_Na_zI5 * comp162_Coff * pow(comp162_b, 4.0) + comp162_Na_zI5 * comp162_gamma + comp162_Na_zI5 * comp162_n1 * comp162_beta(v, comp162_Q10, params) * comp162_b) + comp162_Na_zC5 * comp162_Con * pow(comp162_a, 4.0) + comp162_Na_zI6 * comp162_delta + comp162_Na_zI4 * comp162_n4 * comp162_alfa(v, comp162_Q10, params) * comp162_a;
   gsl_vector_set (f,8,t219);

   double t218;


   t218  =  -(comp162_Na_zC5 * comp162_Con * pow(comp162_a, 4.0) + comp162_Na_zC5 * comp162_gamma + comp162_Na_zC5 * comp162_n1 * comp162_beta(v, comp162_Q10, params)) + comp162_Na_zI5 * comp162_Coff * pow(comp162_b, 4.0) + comp162_Na_zO * comp162_delta + comp162_Na_zC4 * comp162_n4 * comp162_alfa(v, comp162_Q10, params);
   gsl_vector_set (f,9,t218);

   double t217;


   t217  =  -(comp162_Na_zI6 * comp162_Ooff + comp162_Na_zI6 * comp162_delta) + comp162_Na_zO * comp162_Oon + comp162_Na_zI5 * comp162_gamma;
   gsl_vector_set (f,10,t217);

   double t216, v214;


   v214  =  comp162_Na_zI6 + comp162_Na_zI5 + comp162_Na_zI4 + comp162_Na_zI3 + comp162_Na_zI2 + comp162_Na_zI1 + comp162_Na_zO + comp162_Na_zC5 + comp162_Na_zC4 + comp162_Na_zC3 + comp162_Na_zC2 + comp162_Na_zC1;; 
t216  =  -(comp162_Na_zO * comp162_Oon + comp162_Na_zO * comp162_epsilon + comp162_Na_zO * comp162_delta) + comp162_Na_zI6 * comp162_Ooff + (1.0 - v214) * (comp162_teta(v, comp162_Q10, params)) + comp162_Na_zC5 * comp162_gamma;
   gsl_vector_set (f,11,t216);


   return 0;
}


;; Diagonal Jacobian approximation: (f(s+.01) - f(s))/.001 

;; GSL:
;; int (* jacobian) (double t, const double y[], double * dfdy, double dfdt[], void * params);




RecordablesMap<Granule> Granule::recordablesMap_;

template <> void RecordablesMap<Granule>::create()
{

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);


   insert_(names::V_m, &Granule::get_y_elem_<Granule::State_::"V">);


}


Granule::Parameters_::Parameters_ ():
      

  comp162_Vteta  (25.0),

  comp121_Kalpha_n  (40.0),

  comp135_vcbdur  (100.0),

  comp136_V0beta_n  (-35.0),

  comp50_vchold  (-71.0),

  comp162_Agamma  (150.0),

  comp135_vchold  (-71.0),

  comp121_V0beta_n  (-30.0),

  comp156_e  (-16.5),

  comp20_C_m  (1.0),

  comp52_V0beta_b  (-49.9537),

  comp52_V0beta_a  (-18.27914),

  comp159_ggaba  (3e-05),

  comp162_ACon  (0.005),

  comp87_vchdur  (30.0),

  comp88_Aalpha_c  (2.5),

  comp178_vcbase  (-60.0),

  comp135_vcinc  (10.0),

  comp88_Abeta_c  (1.5),

  comp136_Kbeta_n  (-80.0),

  comp22_tauA  (0.03),

  comp50_vcbase  (-69.0),

  comp87_vchold  (-71.0),

  comp22_tauB  (0.5),

  comp21_L  (11.8),

  comp22_tau1  (0.03),

  comp136_Kalpha_n  (-10.0),

  comp22_tau2  (0.5),

  comp52_K_binf  (8.4),

  comp87_vcsteps  (8.0),

  comp26_V0beta_u  (-48.0),

  comp26_V0beta_s  (-18.66),

  comp121_Aalpha_n  (0.0033),

  comp120_vcbase  (-69.0),

  comp25_cao  (2.0),

  comp52_Aalpha_b  (0.0368),

  comp105_cnbase  (0.0001),

  comp52_Aalpha_a  (0.8147),

  comp106_Kalpha_d  (-24.3902),

  comp25_d  (0.2),

  comp155_vcinc  (10.0),

  comp25_F  (96485.3),

  comp23_scale_factor  (1.17120678764272),

  comp136_Aalpha_n  (-0.01),

  comp162_e  (87.39),

  comp178_vcsteps  (9.0),

  comp26_R  (8.31342),

  comp26_Aalpha_u  (0.0013),

  comp26_Aalpha_s  (0.04944),

  comp105_cnout  (2.0),

  comp21_diam  (11.8),

  comp135_vchdur  (30.0),

  comp26_F  (96485.3),

  comp50_cnout  (2.0),

  comp178_vcbdur  (100.0),

  comp26_Kalpha_s  (15.87301587302),

  comp26_Kalpha_u  (-18.183),

  comp26_Kbeta_s  (-25.641),

  comp19_Ra  (0.01),

  comp26_Kbeta_u  (83.33),

  comp159_egaba  (-65.0),

  comp106_e  (-84.69),

  comp52_Kbeta_b  (-8.90123),

  comp52_Kbeta_a  (19.47175),

  comp162_AOoff  (0.005),

  comp162_AOon  (0.75),

  comp136_Abeta_n  (0.125),

  comp52_V0alpha_b  (-111.33209),

  comp136_e  (-84.69),

  comp52_V0alpha_a  (-9.17203),

  comp105_vcsteps  (8.0),

  comp178_vchdur  (30.0),

  comp50_cn  (5e-05),

  comp26_V0alpha_u  (-48.0),

  comp162_Abeta  (1.272),

  comp26_V0alpha_s  (-29.06),

  comp120_vchold  (-71.0),

  comp105_cnsteps  (1.0),

  comp162_Vbeta  (13.99),

  comp88_Balpha_c  (0.0015),

  comp24_scale_factor  (1.33449386521632),

  comp52_K_ainf  (-17.0),

  comp105_vcinc  (10.0),

  comp52_Abeta_b  (0.0345),

  comp52_Abeta_a  (0.1655),

  comp87_vcbdur  (100.0),

  comp87_vcinc  (10.0),

  comp136_V0alpha_n  (-25.0),

  comp178_vchold  (-71.0),

  comp105_cninc  (1000.0),

  comp162_n2  (3.279),

  comp162_n1  (5.422),

  comp162_n4  (0.738),

  comp121_Abeta_n  (0.0033),

  comp162_n3  (1.83),

  comp26_Abeta_u  (0.0013),

  comp26_Abeta_s  (0.08298),

  comp52_e  (-84.69),

  comp52_V0_ainf  (-38.0),

  comp155_vcsteps  (8.0),

  comp162_Aalfa  (353.91),

  comp178_vcinc  (10.0),

  comp88_Kbeta_c  (-11.765),

  comp155_vchdur  (30.0),

  comp105_cnhold  (0.0001),

  comp121_e  (-84.69),

  comp88_Kalpha_c  (-11.765),

  comp19_V_t  (-35.0),

  comp120_vcbdur  (100.0),

  comp24_e  (0.0),

  comp22_e  (0.0),

  comp106_V0alpha_d  (-83.94),

  comp121_B_ninf  (6.0),

  comp22_scale_factor  (1.27309992372272),

  comp50_vchdur  (30.0),

  comp106_gbar  (0.0009),

  comp25_beta  (1.5),

  comp19_celsius  (30.0),

  comp162_gbar  (0.013),

  comp105_vcbdur  (100.0),

  comp106_V0beta_d  (-83.94),

  comp50_vcsteps  (8.0),

  comp106_Abeta_d  (0.16994),

  comp24_tp  (2.79815135516492),

  comp120_vcinc  (10.0),

  comp162_Ateta  (0.0201),

  comp155_vcbase  (-69.0),

  comp50_vcbdur  (100.0),

  comp88_e  (-84.69),

  comp26_gbar  (0.00046),

  comp121_gbar  (0.00025),

  comp25_cai0  (0.0001),

  comp106_Aalpha_d  (0.13289),

  comp155_vcbdur  (100.0),

  comp23_e  (-75.0),

  comp50_vcinc  (10.0),

  comp121_V0alpha_n  (-30.0),

  comp88_Bbeta_c  (0.00015),

  comp155_vchold  (-71.0),

  comp52_Kalpha_b  (12.8433),

  comp52_Kalpha_a  (-23.32708),

  comp162_ACoff  (0.5),

  comp52_gbar  (0.0032),

  comp156_gbar  (5.68e-05),

  comp87_vcbase  (-69.0),

  comp120_vchdur  (30.0),

  comp22_tp  (0.0897897037263841),

  comp162_Aepsilon  (1.75),

  comp23_tauB  (8.8),

  comp23_tauA  (0.31),

  comp23_tau2  (8.8),

  comp23_tau1  (0.31),

  comp121_V0_ninf  (-35.0),

  comp162_Adelta  (40.0),

  comp105_vchold  (-71.0),

  comp105_vchdur  (30.0),

  comp24_tau1  (1.0),

  comp105_vcbase  (-69.0),

  comp120_vcsteps  (8.0),

  comp121_Kbeta_n  (-20.0),

  comp24_tau2  (13.3),

  comp24_tauA  (1.0),

  comp136_gbar  (0.003),

  comp106_Kbeta_d  (35.714),

  comp24_tauB  (13.3),

  comp162_Valfa  (13.99),

  comp23_tp  (1.07511305886323),

  comp52_V0_binf  (-78.8),

  comp88_gbar  (0.04),

  comp135_vcbase  (-69.0),

  comp135_vcsteps  (8.0)
  {
  celsius  =  comp19_celsius;
  V_t  =  comp19_V_t;
  }

Granule::State_::State_ (const Parameters_& p)
{

   double v212, comp25_ca, cai, comp88_cai, comp25_cao, cao, comp26_cao, comp26_cai, comp25_cai, ica, comp25_ica, comp88_cai1, comp19_celsius, comp26_Q10, comp121_B_ninf, comp121_V0_ninf, v, KM_m_inf201, comp23_A, comp23_B, comp23_g, comp162_Q10, comp22_A, comp22_B, comp22_g, comp24_A, comp24_B, comp24_g, comp88_Q10, comp106_Q10, comp52_K_binf, comp52_V0_binf, comp52_b_inf, comp136_Q10, comp121_Q10, comp52_K_ainf, comp52_V0_ainf, comp52_a_inf, comp26_F, comp26_R, comp26_e, comp52_Q10, KA_h_inf187, comp88_c_inf, comp26_u_inf, comp136_tau_n, comp88_tau_c, KM_m_tau202, comp162_ACon, comp162_Con, comp52_tau_b, comp52_tau_a, comp162_Adelta, comp162_delta, comp26_tau_s, comp26_tau_u, comp26_s_inf, KA_m_inf185, comp162_Aepsilon, comp162_epsilon, comp162_AOoff, comp162_Ooff, comp162_AOon, comp162_Oon, comp106_d_inf, comp162_Agamma, comp162_gamma, comp136_n_inf, comp162_ACoff, comp162_Coff, comp106_tau_d, CaHVA_m_inf179, CaHVA_h_tau182, KA_m_tau186, KCa_m_tau192, KV_m_inf206, KA_h_tau188, Kir_m_tau197, KCa_m_inf191, comp162_b, comp162_a, CaHVA_h_inf181, KV_m_tau207, CaHVA_m_tau180, Kir_m_inf196, KM_m205, Kir_m200, KA_h190, KV_m210, CaHVA_m183, CaHVA_h184, KA_m189, KCa_m195, i_Na, ina, i_KCa, i_KV, i_Kir, i_KM, i_KA, ik, i_CaHVA, i_AMPA, i_NMDA, i_GABA, i_Lkg1, i_Lkg2, i, comp162_Na_zO, comp162_Na_zI6, comp162_Na_zC5, comp162_Na_zI5, comp162_Na_zC4, comp162_Na_zI4, comp162_Na_zC3, comp162_Na_zI3, comp162_Na_zC2, comp162_Na_zI2, comp162_Na_zC1, comp162_Na_zI1, comp162_Vteta, comp121_Kalpha_n, comp135_vcbdur, comp136_V0beta_n, comp50_vchold, comp135_vchold, comp121_V0beta_n, comp156_e, comp20_C_m, comp52_V0beta_b, comp52_V0beta_a, comp159_ggaba, comp87_vchdur, comp88_Aalpha_c, comp178_vcbase, comp135_vcinc, comp88_Abeta_c, comp136_Kbeta_n, comp22_tauA, comp50_vcbase, comp87_vchold, comp22_tauB, comp21_L, comp22_tau1, comp136_Kalpha_n, comp22_tau2, comp87_vcsteps, comp26_V0beta_u, comp26_V0beta_s, comp121_Aalpha_n, comp120_vcbase, comp52_Aalpha_b, comp105_cnbase, comp52_Aalpha_a, comp106_Kalpha_d, comp25_d, comp155_vcinc, comp25_F, comp23_scale_factor, comp136_Aalpha_n, comp162_e, comp178_vcsteps, comp26_Aalpha_u, comp26_Aalpha_s, comp105_cnout, comp21_diam, comp135_vchdur, comp50_cnout, comp178_vcbdur, comp26_Kalpha_s, comp26_Kalpha_u, comp26_Kbeta_s, comp19_Ra, comp26_Kbeta_u, comp159_egaba, comp106_e, comp52_Kbeta_b, comp52_Kbeta_a, comp136_Abeta_n, comp52_V0alpha_b, comp136_e, comp52_V0alpha_a, comp105_vcsteps, comp178_vchdur, comp50_cn, comp26_V0alpha_u, comp162_Abeta, comp26_V0alpha_s, comp120_vchold, comp105_cnsteps, comp162_Vbeta, comp88_Balpha_c, comp24_scale_factor, comp105_vcinc, comp52_Abeta_b, comp52_Abeta_a, comp87_vcbdur, comp87_vcinc, comp136_V0alpha_n, comp178_vchold, comp105_cninc, comp162_n2, comp162_n1, comp162_n4, comp121_Abeta_n, comp162_n3, comp26_Abeta_u, comp26_Abeta_s, comp52_e, comp155_vcsteps, comp162_Aalfa, comp178_vcinc, comp88_Kbeta_c, comp155_vchdur, comp105_cnhold, comp121_e, comp88_Kalpha_c, comp19_V_t, comp120_vcbdur, comp24_e, comp22_e, comp106_V0alpha_d, comp22_scale_factor, comp50_vchdur, comp106_gbar, comp25_beta, comp162_gbar, comp105_vcbdur, comp106_V0beta_d, comp50_vcsteps, comp106_Abeta_d, comp24_tp, comp120_vcinc, comp162_Ateta, comp155_vcbase, comp50_vcbdur, comp88_e, comp26_gbar, comp121_gbar, comp25_cai0, comp106_Aalpha_d, comp155_vcbdur, comp23_e, comp50_vcinc, comp121_V0alpha_n, comp88_Bbeta_c, comp155_vchold, comp52_Kalpha_b, comp52_Kalpha_a, comp52_gbar, comp156_gbar, comp87_vcbase, comp120_vchdur, comp22_tp, comp23_tauB, comp23_tauA, comp23_tau2, comp23_tau1, comp105_vchold, comp105_vchdur, comp24_tau1, comp105_vcbase, comp120_vcsteps, comp121_Kbeta_n, comp24_tau2, comp24_tauA, comp136_gbar, comp106_Kbeta_d, comp24_tauB, comp162_Valfa, comp23_tp, comp88_gbar, comp135_vcbase, comp135_vcsteps, comp162_Na_z;

   const Parameters_ *params = &p;


   memset(y_,0,28*sizeof(double));

   comp162_Vteta  =  p.comp162_Vteta;
   comp121_Kalpha_n  =  p.comp121_Kalpha_n;
   comp135_vcbdur  =  p.comp135_vcbdur;
   comp136_V0beta_n  =  p.comp136_V0beta_n;
   comp50_vchold  =  p.comp50_vchold;
   comp162_Agamma  =  p.comp162_Agamma;
   comp135_vchold  =  p.comp135_vchold;
   comp121_V0beta_n  =  p.comp121_V0beta_n;
   comp156_e  =  p.comp156_e;
   comp20_C_m  =  p.comp20_C_m;
   comp52_V0beta_b  =  p.comp52_V0beta_b;
   comp52_V0beta_a  =  p.comp52_V0beta_a;
   comp159_ggaba  =  p.comp159_ggaba;
   comp162_ACon  =  p.comp162_ACon;
   comp87_vchdur  =  p.comp87_vchdur;
   comp88_Aalpha_c  =  p.comp88_Aalpha_c;
   comp178_vcbase  =  p.comp178_vcbase;
   comp135_vcinc  =  p.comp135_vcinc;
   comp88_Abeta_c  =  p.comp88_Abeta_c;
   comp136_Kbeta_n  =  p.comp136_Kbeta_n;
   comp22_tauA  =  p.comp22_tauA;
   comp50_vcbase  =  p.comp50_vcbase;
   comp87_vchold  =  p.comp87_vchold;
   comp22_tauB  =  p.comp22_tauB;
   comp21_L  =  p.comp21_L;
   comp22_tau1  =  p.comp22_tau1;
   comp136_Kalpha_n  =  p.comp136_Kalpha_n;
   comp22_tau2  =  p.comp22_tau2;
   comp52_K_binf  =  p.comp52_K_binf;
   comp87_vcsteps  =  p.comp87_vcsteps;
   comp26_V0beta_u  =  p.comp26_V0beta_u;
   comp26_V0beta_s  =  p.comp26_V0beta_s;
   comp121_Aalpha_n  =  p.comp121_Aalpha_n;
   comp120_vcbase  =  p.comp120_vcbase;
   comp25_cao  =  p.comp25_cao;
   comp52_Aalpha_b  =  p.comp52_Aalpha_b;
   comp105_cnbase  =  p.comp105_cnbase;
   comp52_Aalpha_a  =  p.comp52_Aalpha_a;
   comp106_Kalpha_d  =  p.comp106_Kalpha_d;
   comp25_d  =  p.comp25_d;
   comp155_vcinc  =  p.comp155_vcinc;
   comp25_F  =  p.comp25_F;
   comp23_scale_factor  =  p.comp23_scale_factor;
   comp136_Aalpha_n  =  p.comp136_Aalpha_n;
   comp162_e  =  p.comp162_e;
   comp178_vcsteps  =  p.comp178_vcsteps;
   comp26_R  =  p.comp26_R;
   comp26_Aalpha_u  =  p.comp26_Aalpha_u;
   comp26_Aalpha_s  =  p.comp26_Aalpha_s;
   comp105_cnout  =  p.comp105_cnout;
   comp21_diam  =  p.comp21_diam;
   comp135_vchdur  =  p.comp135_vchdur;
   comp26_F  =  p.comp26_F;
   comp50_cnout  =  p.comp50_cnout;
   comp178_vcbdur  =  p.comp178_vcbdur;
   comp26_Kalpha_s  =  p.comp26_Kalpha_s;
   comp26_Kalpha_u  =  p.comp26_Kalpha_u;
   comp26_Kbeta_s  =  p.comp26_Kbeta_s;
   comp19_Ra  =  p.comp19_Ra;
   comp26_Kbeta_u  =  p.comp26_Kbeta_u;
   comp159_egaba  =  p.comp159_egaba;
   comp106_e  =  p.comp106_e;
   comp52_Kbeta_b  =  p.comp52_Kbeta_b;
   comp52_Kbeta_a  =  p.comp52_Kbeta_a;
   comp162_AOoff  =  p.comp162_AOoff;
   comp162_AOon  =  p.comp162_AOon;
   comp136_Abeta_n  =  p.comp136_Abeta_n;
   comp52_V0alpha_b  =  p.comp52_V0alpha_b;
   comp136_e  =  p.comp136_e;
   comp52_V0alpha_a  =  p.comp52_V0alpha_a;
   comp105_vcsteps  =  p.comp105_vcsteps;
   comp178_vchdur  =  p.comp178_vchdur;
   comp50_cn  =  p.comp50_cn;
   comp26_V0alpha_u  =  p.comp26_V0alpha_u;
   comp162_Abeta  =  p.comp162_Abeta;
   comp26_V0alpha_s  =  p.comp26_V0alpha_s;
   comp120_vchold  =  p.comp120_vchold;
   comp105_cnsteps  =  p.comp105_cnsteps;
   comp162_Vbeta  =  p.comp162_Vbeta;
   comp88_Balpha_c  =  p.comp88_Balpha_c;
   comp24_scale_factor  =  p.comp24_scale_factor;
   comp52_K_ainf  =  p.comp52_K_ainf;
   comp105_vcinc  =  p.comp105_vcinc;
   comp52_Abeta_b  =  p.comp52_Abeta_b;
   comp52_Abeta_a  =  p.comp52_Abeta_a;
   comp87_vcbdur  =  p.comp87_vcbdur;
   comp87_vcinc  =  p.comp87_vcinc;
   comp136_V0alpha_n  =  p.comp136_V0alpha_n;
   comp178_vchold  =  p.comp178_vchold;
   comp105_cninc  =  p.comp105_cninc;
   comp162_n2  =  p.comp162_n2;
   comp162_n1  =  p.comp162_n1;
   comp162_n4  =  p.comp162_n4;
   comp121_Abeta_n  =  p.comp121_Abeta_n;
   comp162_n3  =  p.comp162_n3;
   comp26_Abeta_u  =  p.comp26_Abeta_u;
   comp26_Abeta_s  =  p.comp26_Abeta_s;
   comp52_e  =  p.comp52_e;
   comp52_V0_ainf  =  p.comp52_V0_ainf;
   comp155_vcsteps  =  p.comp155_vcsteps;
   comp162_Aalfa  =  p.comp162_Aalfa;
   comp178_vcinc  =  p.comp178_vcinc;
   comp88_Kbeta_c  =  p.comp88_Kbeta_c;
   comp155_vchdur  =  p.comp155_vchdur;
   comp105_cnhold  =  p.comp105_cnhold;
   comp121_e  =  p.comp121_e;
   comp88_Kalpha_c  =  p.comp88_Kalpha_c;
   comp19_V_t  =  p.comp19_V_t;
   comp120_vcbdur  =  p.comp120_vcbdur;
   comp24_e  =  p.comp24_e;
   comp22_e  =  p.comp22_e;
   comp106_V0alpha_d  =  p.comp106_V0alpha_d;
   comp121_B_ninf  =  p.comp121_B_ninf;
   comp22_scale_factor  =  p.comp22_scale_factor;
   comp50_vchdur  =  p.comp50_vchdur;
   comp106_gbar  =  p.comp106_gbar;
   comp25_beta  =  p.comp25_beta;
   comp19_celsius  =  p.comp19_celsius;
   comp162_gbar  =  p.comp162_gbar;
   comp105_vcbdur  =  p.comp105_vcbdur;
   comp106_V0beta_d  =  p.comp106_V0beta_d;
   comp50_vcsteps  =  p.comp50_vcsteps;
   comp106_Abeta_d  =  p.comp106_Abeta_d;
   comp24_tp  =  p.comp24_tp;
   comp120_vcinc  =  p.comp120_vcinc;
   comp162_Ateta  =  p.comp162_Ateta;
   comp155_vcbase  =  p.comp155_vcbase;
   comp50_vcbdur  =  p.comp50_vcbdur;
   comp88_e  =  p.comp88_e;
   comp26_gbar  =  p.comp26_gbar;
   comp121_gbar  =  p.comp121_gbar;
   comp25_cai0  =  p.comp25_cai0;
   comp106_Aalpha_d  =  p.comp106_Aalpha_d;
   comp155_vcbdur  =  p.comp155_vcbdur;
   comp23_e  =  p.comp23_e;
   comp50_vcinc  =  p.comp50_vcinc;
   comp121_V0alpha_n  =  p.comp121_V0alpha_n;
   comp88_Bbeta_c  =  p.comp88_Bbeta_c;
   comp155_vchold  =  p.comp155_vchold;
   comp52_Kalpha_b  =  p.comp52_Kalpha_b;
   comp52_Kalpha_a  =  p.comp52_Kalpha_a;
   comp162_ACoff  =  p.comp162_ACoff;
   comp52_gbar  =  p.comp52_gbar;
   comp156_gbar  =  p.comp156_gbar;
   comp87_vcbase  =  p.comp87_vcbase;
   comp120_vchdur  =  p.comp120_vchdur;
   comp22_tp  =  p.comp22_tp;
   comp162_Aepsilon  =  p.comp162_Aepsilon;
   comp23_tauB  =  p.comp23_tauB;
   comp23_tauA  =  p.comp23_tauA;
   comp23_tau2  =  p.comp23_tau2;
   comp23_tau1  =  p.comp23_tau1;
   comp121_V0_ninf  =  p.comp121_V0_ninf;
   comp162_Adelta  =  p.comp162_Adelta;
   comp105_vchold  =  p.comp105_vchold;
   comp105_vchdur  =  p.comp105_vchdur;
   comp24_tau1  =  p.comp24_tau1;
   comp105_vcbase  =  p.comp105_vcbase;
   comp120_vcsteps  =  p.comp120_vcsteps;
   comp121_Kbeta_n  =  p.comp121_Kbeta_n;
   comp24_tau2  =  p.comp24_tau2;
   comp24_tauA  =  p.comp24_tauA;
   comp136_gbar  =  p.comp136_gbar;
   comp106_Kbeta_d  =  p.comp106_Kbeta_d;
   comp24_tauB  =  p.comp24_tauB;
   comp162_Valfa  =  p.comp162_Valfa;
   comp23_tp  =  p.comp23_tp;
   comp52_V0_binf  =  p.comp52_V0_binf;
   comp88_gbar  =  p.comp88_gbar;
   comp135_vcbase  =  p.comp135_vcbase;
   comp135_vcsteps  =  p.comp135_vcsteps;

   comp25_ca  =  0.0001;
   cai  =  comp25_ca;
   comp88_cai  =  cai;
   cao  =  comp25_cao;
   comp26_cao  =  cao;
   comp26_cai  =  cai;
   comp25_cai  =  cai;
   comp25_ica  =  ica;
   if (comp88_cai < 0.0001) {v212  =  0.0001;} else {v212  =  comp88_cai;}; 
comp88_cai1  =  v212;
   comp26_Q10  =  pow(3.0, (comp19_celsius + -20.0) / 10.0);
   v  =  -65.0;
   KM_m_inf201  =  1.0 / (1.0 + exp(-(v + -(comp121_V0_ninf)) / comp121_B_ninf));
   comp23_A  =  0.0;
   comp23_B  =  0.0;
   comp23_g  =  comp23_B + -(comp23_A);
   comp162_Q10  =  pow(3.0, (comp19_celsius + -20.0) / 10.0);
   comp22_A  =  0.0;
   comp22_B  =  0.0;
   comp22_g  =  comp22_B + -(comp22_A);
   comp24_A  =  0.0;
   comp24_B  =  0.0;
   comp24_g  =  comp24_B + -(comp24_A);
   comp88_Q10  =  pow(3.0, (comp19_celsius + -30.0) / 10.0);
   comp106_Q10  =  pow(3.0, (comp19_celsius + -20.0) / 10.0);
   comp52_b_inf  =  1.0 / (1.0 + exp((v + -(comp52_V0_binf)) / comp52_K_binf));
   comp136_Q10  =  pow(3.0, (comp19_celsius + -6.3) / 10.0);
   comp121_Q10  =  pow(3.0, (comp19_celsius + -22.0) / 10.0);
   comp52_a_inf  =  1.0 / (1.0 + exp((v + -(comp52_V0_ainf)) / comp52_K_ainf));
   comp26_e  =  (1000.0 * comp26_R * (comp19_celsius + 273.15)) / (2.0 * comp26_F) * log(comp26_cao / comp26_cai);
   comp52_Q10  =  pow(3.0, (comp19_celsius + -25.5) / 10.0);
   KA_h_inf187  =  comp52_b_inf;
   comp88_c_inf  =  (comp88_alpha_c(v, comp88_cai, comp88_Q10, params)) / (comp88_alpha_c(v, comp88_cai, comp88_Q10, params) + comp88_beta_c(v, comp88_cai, comp88_Q10, params));
   comp26_u_inf  =  (comp26_alpha_u(v, comp26_Q10, params)) / (comp26_alpha_u(v, comp26_Q10, params) + comp26_beta_u(v, comp26_Q10, params));
   comp136_tau_n  =  1.0 / (comp136_alpha_n(v, comp136_Q10, params) + comp136_beta_n(v, comp136_Q10, params));
   comp88_tau_c  =  1.0 / (comp88_alpha_c(v, comp88_cai, comp88_Q10, params) + comp88_beta_c(v, comp88_cai, comp88_Q10, params));
   KM_m_tau202  =  1.0 / (comp121_alpha_n(v, comp121_Q10, params) + comp121_beta_n(v, comp121_Q10, params));
   comp162_Con  =  comp162_Q10 * comp162_ACon;
   comp52_tau_b  =  1.0 / (comp52_alpha_b(v, comp52_Q10, params) + comp52_beta_b(v, comp52_Q10, params));
   comp52_tau_a  =  1.0 / (comp52_alpha_a(v, comp52_Q10, params) + comp52_beta_a(v, comp52_Q10, params));
   comp162_delta  =  comp162_Q10 * comp162_Adelta;
   comp26_tau_s  =  1.0 / (comp26_alpha_s(v, comp26_Q10, params) + comp26_beta_s(v, comp26_Q10, params));
   comp26_tau_u  =  1.0 / (comp26_alpha_u(v, comp26_Q10, params) + comp26_beta_u(v, comp26_Q10, params));
   comp26_s_inf  =  (comp26_alpha_s(v, comp26_Q10, params)) / (comp26_alpha_s(v, comp26_Q10, params) + comp26_beta_s(v, comp26_Q10, params));
   KA_m_inf185  =  comp52_a_inf;
   comp162_epsilon  =  comp162_Q10 * comp162_Aepsilon;
   comp162_Ooff  =  comp162_Q10 * comp162_AOoff;
   comp162_Oon  =  comp162_Q10 * comp162_AOon;
   comp106_d_inf  =  (comp106_alpha_d(v, comp106_Q10, params)) / (comp106_alpha_d(v, comp106_Q10, params) + comp106_beta_d(v, comp106_Q10, params));
   comp162_gamma  =  comp162_Q10 * comp162_Agamma;
   comp136_n_inf  =  (comp136_alpha_n(v, comp136_Q10, params)) / (comp136_alpha_n(v, comp136_Q10, params) + comp136_beta_n(v, comp136_Q10, params));
   comp162_Coff  =  comp162_Q10 * comp162_ACoff;
   comp106_tau_d  =  1.0 / (comp106_alpha_d(v, comp106_Q10, params) + comp106_beta_d(v, comp106_Q10, params));
   CaHVA_m_inf179  =  comp26_s_inf;
   CaHVA_h_tau182  =  comp26_tau_u;
   KA_m_tau186  =  comp52_tau_a;
   KCa_m_tau192  =  comp88_tau_c;
   KV_m_inf206  =  comp136_n_inf;
   KA_h_tau188  =  comp52_tau_b;
   Kir_m_tau197  =  comp106_tau_d;
   KCa_m_inf191  =  comp88_c_inf;
   comp162_b  =  pow(comp162_Ooff / comp162_Coff, 1.0 / 4.0);
   comp162_a  =  pow(comp162_Oon / comp162_Con, 1.0 / 4.0);
   CaHVA_h_inf181  =  comp26_u_inf;
   KV_m_tau207  =  comp136_tau_n;
   CaHVA_m_tau180  =  comp26_tau_s;
   Kir_m_inf196  =  comp106_d_inf;
   KM_m205  =  1.0 / (1.0 + exp(-(v + -(comp121_V0_ninf)) / comp121_B_ninf));
   Kir_m200  =  comp106_d_inf;
   KA_h190  =  1.0 / (1.0 + exp((v + -(comp52_V0_binf)) / comp52_K_binf));
   KV_m210  =  comp136_n_inf;
   CaHVA_m183  =  comp26_s_inf;
   CaHVA_h184  =  comp26_u_inf;
   KA_m189  =  1.0 / (1.0 + exp((v + -(comp52_V0_ainf)) / comp52_K_ainf));
   KCa_m195  =  comp88_c_inf;
    
   y_[0]  =  v;
   y_[21]  =  comp25_ca;
   y_[22]  =  comp24_B;
   y_[23]  =  comp24_A;
   y_[24]  =  comp22_B;
   y_[25]  =  comp22_A;
   y_[26]  =  comp23_B;
   y_[27]  =  comp23_A;
   y_[20]  =  KM_m205;
   y_[1]  =  Kir_m200;
   y_[2]  =  KA_h190;
   y_[3]  =  KV_m210;
   y_[4]  =  CaHVA_m183;
   y_[5]  =  CaHVA_h184;
   y_[18]  =  KA_m189;
   y_[19]  =  KCa_m195;

   if (!((M_PI * comp21_L * comp21_diam) > (0.0))) 
      { throw BadProperty ("Constraint (> (* PI comp21:L comp21:diam) 0.0) is not satisfied."); }; 

   if (!((comp162_gbar) > (0.0))) 
      { throw BadProperty ("Constraint (> comp162:gbar 0.0) is not satisfied."); }; 

   if (!((comp88_gbar) > (0.0))) 
      { throw BadProperty ("Constraint (> comp88:gbar 0.0) is not satisfied."); }; 

   if (!((comp136_gbar) > (0.0))) 
      { throw BadProperty ("Constraint (> comp136:gbar 0.0) is not satisfied."); }; 

   if (!((comp156_gbar) > (0.0))) 
      { throw BadProperty ("Constraint (> comp156:gbar 0.0) is not satisfied."); }; 

   if (!((comp159_ggaba) > (0.0))) 
      { throw BadProperty ("Constraint (> comp159:ggaba 0.0) is not satisfied."); }; 

   if (!((comp106_gbar) > (0.0))) 
      { throw BadProperty ("Constraint (> comp106:gbar 0.0) is not satisfied."); }; 

   if (!((comp26_gbar) > (0.0))) 
      { throw BadProperty ("Constraint (> comp26:gbar 0.0) is not satisfied."); }; 

   if (!((comp121_gbar) > (0.0))) 
      { throw BadProperty ("Constraint (> comp121:gbar 0.0) is not satisfied."); }; 

   if (!((comp52_gbar) > (0.0))) 
      { throw BadProperty ("Constraint (> comp52:gbar 0.0) is not satisfied."); }; 




   gsl_vector *ssvect228;
   ssvect228 = gsl_vector_alloc (steadyStateSize);
   fsolve (Granule_steadystate, 12, ssvect228,
           (void *)&p, "Granule");
             
   y_[0] = v;

   y_[1] = Kir_m200;

   y_[2] = KA_h190;

   y_[3] = KV_m210;

   y_[4] = CaHVA_m183;

   y_[5] = CaHVA_h184;

   y_[6] = gsl_vector_get(ssvect228, 0);

   y_[7] = gsl_vector_get(ssvect228, 1);

   y_[8] = gsl_vector_get(ssvect228, 2);

   y_[9] = gsl_vector_get(ssvect228, 3);

   y_[10] = gsl_vector_get(ssvect228, 4);

   y_[11] = gsl_vector_get(ssvect228, 5);

   y_[12] = gsl_vector_get(ssvect228, 6);

   y_[13] = gsl_vector_get(ssvect228, 7);

   y_[14] = gsl_vector_get(ssvect228, 8);

   y_[15] = gsl_vector_get(ssvect228, 9);

   y_[16] = gsl_vector_get(ssvect228, 10);

   y_[17] = gsl_vector_get(ssvect228, 11);

   y_[18] = KA_m189;

   y_[19] = KCa_m195;

   y_[20] = KM_m205;

   y_[21] = comp25_ca;

   y_[22] = comp24_B;

   y_[23] = comp24_A;

   y_[24] = comp22_B;

   y_[25] = comp22_A;

   y_[26] = comp23_B;

   y_[27] = comp23_A;


   gsl_vector_free (ssvect228);

   comp162_Na_z  =  comp162_Na_zO;
    
   i_Na  =  (comp162_gbar * comp162_Na_z) * (v - comp162_e);
   ina  =  i_Na;
   i_KCa  =  (comp88_gbar * KCa_m195) * (v - comp88_e);
   i_KV  =  (comp136_gbar * pow(KV_m210, 4.0)) * (v - comp136_e);
   i_Kir  =  (comp106_gbar * Kir_m200) * (v - comp106_e);
   i_KM  =  (comp121_gbar * KM_m205) * (v - comp121_e);
   i_KA  =  (comp52_gbar * pow(KA_m189, 3.0) * KA_h190) * (v - comp52_e);
   ik  =  i_KCa + i_KV + i_Kir + i_KM + i_KA;
   i_CaHVA  =  (comp26_gbar * pow(CaHVA_m183, 2.0) * CaHVA_h184) * (v - comp26_e);
   ica  =  i_CaHVA;
   i_AMPA  =  (100.0 / (M_PI * comp21_L * comp21_diam)) * comp22_g * (v - comp22_e);
   i_NMDA  =  (100.0 / (M_PI * comp21_L * comp21_diam)) * comp24_g * (v - comp24_e);
   i_GABA  =  (100.0 / (M_PI * comp21_L * comp21_diam)) * comp23_g * (v - comp23_e);
   i_Lkg1  =  comp156_gbar * (v - comp156_e);
   i_Lkg2  =  comp159_ggaba * (v - comp159_egaba);
   i  =  i_AMPA + i_NMDA + i_GABA + i_Lkg1 + i_Lkg2;


}


Granule::State_::State_ (const State_& s)  
{

        
  for ( int i = 0 ; i <  ; ++i ) 
  {
      y_[i] = s.y_[i];
  }

}


Granule::State_& Granule::State_::operator=(const State_& s)
{

        
  assert(this != &s);  
  for ( size_t i = 0 ; i <  ; ++i )
       y_[i] = s.y_[i];

  return *this;

}



void Granule::Parameters_::get (DictionaryDatum &d) const
{

   def<double_t>(d, "comp162_Vteta", comp162_Vteta);
   def<double_t>(d, "comp121_Kalpha_n", comp121_Kalpha_n);
   def<double_t>(d, "comp135_vcbdur", comp135_vcbdur);
   def<double_t>(d, "comp136_V0beta_n", comp136_V0beta_n);
   def<double_t>(d, "comp50_vchold", comp50_vchold);
   def<double_t>(d, "comp162_Agamma", comp162_Agamma);
   def<double_t>(d, "comp135_vchold", comp135_vchold);
   def<double_t>(d, "comp121_V0beta_n", comp121_V0beta_n);
   def<double_t>(d, "comp156_e", comp156_e);
   def<double_t>(d, "comp20_C_m", comp20_C_m);
   def<double_t>(d, "comp52_V0beta_b", comp52_V0beta_b);
   def<double_t>(d, "comp52_V0beta_a", comp52_V0beta_a);
   def<double_t>(d, "comp159_ggaba", comp159_ggaba);
   def<double_t>(d, "comp162_ACon", comp162_ACon);
   def<double_t>(d, "comp87_vchdur", comp87_vchdur);
   def<double_t>(d, "comp88_Aalpha_c", comp88_Aalpha_c);
   def<double_t>(d, "comp178_vcbase", comp178_vcbase);
   def<double_t>(d, "comp135_vcinc", comp135_vcinc);
   def<double_t>(d, "comp88_Abeta_c", comp88_Abeta_c);
   def<double_t>(d, "comp136_Kbeta_n", comp136_Kbeta_n);
   def<double_t>(d, "comp22_tauA", comp22_tauA);
   def<double_t>(d, "comp50_vcbase", comp50_vcbase);
   def<double_t>(d, "comp87_vchold", comp87_vchold);
   def<double_t>(d, "comp22_tauB", comp22_tauB);
   def<double_t>(d, "comp21_L", comp21_L);
   def<double_t>(d, "comp22_tau1", comp22_tau1);
   def<double_t>(d, "comp136_Kalpha_n", comp136_Kalpha_n);
   def<double_t>(d, "comp22_tau2", comp22_tau2);
   def<double_t>(d, "comp52_K_binf", comp52_K_binf);
   def<double_t>(d, "comp87_vcsteps", comp87_vcsteps);
   def<double_t>(d, "comp26_V0beta_u", comp26_V0beta_u);
   def<double_t>(d, "comp26_V0beta_s", comp26_V0beta_s);
   def<double_t>(d, "comp121_Aalpha_n", comp121_Aalpha_n);
   def<double_t>(d, "comp120_vcbase", comp120_vcbase);
   def<double_t>(d, "comp25_cao", comp25_cao);
   def<double_t>(d, "comp52_Aalpha_b", comp52_Aalpha_b);
   def<double_t>(d, "comp105_cnbase", comp105_cnbase);
   def<double_t>(d, "comp52_Aalpha_a", comp52_Aalpha_a);
   def<double_t>(d, "comp106_Kalpha_d", comp106_Kalpha_d);
   def<double_t>(d, "comp25_d", comp25_d);
   def<double_t>(d, "comp155_vcinc", comp155_vcinc);
   def<double_t>(d, "comp25_F", comp25_F);
   def<double_t>(d, "comp23_scale_factor", comp23_scale_factor);
   def<double_t>(d, "comp136_Aalpha_n", comp136_Aalpha_n);
   def<double_t>(d, "comp162_e", comp162_e);
   def<double_t>(d, "comp178_vcsteps", comp178_vcsteps);
   def<double_t>(d, "comp26_R", comp26_R);
   def<double_t>(d, "comp26_Aalpha_u", comp26_Aalpha_u);
   def<double_t>(d, "comp26_Aalpha_s", comp26_Aalpha_s);
   def<double_t>(d, "comp105_cnout", comp105_cnout);
   def<double_t>(d, "comp21_diam", comp21_diam);
   def<double_t>(d, "comp135_vchdur", comp135_vchdur);
   def<double_t>(d, "comp26_F", comp26_F);
   def<double_t>(d, "comp50_cnout", comp50_cnout);
   def<double_t>(d, "comp178_vcbdur", comp178_vcbdur);
   def<double_t>(d, "comp26_Kalpha_s", comp26_Kalpha_s);
   def<double_t>(d, "comp26_Kalpha_u", comp26_Kalpha_u);
   def<double_t>(d, "comp26_Kbeta_s", comp26_Kbeta_s);
   def<double_t>(d, "comp19_Ra", comp19_Ra);
   def<double_t>(d, "comp26_Kbeta_u", comp26_Kbeta_u);
   def<double_t>(d, "comp159_egaba", comp159_egaba);
   def<double_t>(d, "comp106_e", comp106_e);
   def<double_t>(d, "comp52_Kbeta_b", comp52_Kbeta_b);
   def<double_t>(d, "comp52_Kbeta_a", comp52_Kbeta_a);
   def<double_t>(d, "comp162_AOoff", comp162_AOoff);
   def<double_t>(d, "comp162_AOon", comp162_AOon);
   def<double_t>(d, "comp136_Abeta_n", comp136_Abeta_n);
   def<double_t>(d, "comp52_V0alpha_b", comp52_V0alpha_b);
   def<double_t>(d, "comp136_e", comp136_e);
   def<double_t>(d, "comp52_V0alpha_a", comp52_V0alpha_a);
   def<double_t>(d, "comp105_vcsteps", comp105_vcsteps);
   def<double_t>(d, "comp178_vchdur", comp178_vchdur);
   def<double_t>(d, "comp50_cn", comp50_cn);
   def<double_t>(d, "comp26_V0alpha_u", comp26_V0alpha_u);
   def<double_t>(d, "comp162_Abeta", comp162_Abeta);
   def<double_t>(d, "comp26_V0alpha_s", comp26_V0alpha_s);
   def<double_t>(d, "comp120_vchold", comp120_vchold);
   def<double_t>(d, "comp105_cnsteps", comp105_cnsteps);
   def<double_t>(d, "comp162_Vbeta", comp162_Vbeta);
   def<double_t>(d, "comp88_Balpha_c", comp88_Balpha_c);
   def<double_t>(d, "comp24_scale_factor", comp24_scale_factor);
   def<double_t>(d, "comp52_K_ainf", comp52_K_ainf);
   def<double_t>(d, "comp105_vcinc", comp105_vcinc);
   def<double_t>(d, "comp52_Abeta_b", comp52_Abeta_b);
   def<double_t>(d, "comp52_Abeta_a", comp52_Abeta_a);
   def<double_t>(d, "comp87_vcbdur", comp87_vcbdur);
   def<double_t>(d, "comp87_vcinc", comp87_vcinc);
   def<double_t>(d, "comp136_V0alpha_n", comp136_V0alpha_n);
   def<double_t>(d, "comp178_vchold", comp178_vchold);
   def<double_t>(d, "comp105_cninc", comp105_cninc);
   def<double_t>(d, "comp162_n2", comp162_n2);
   def<double_t>(d, "comp162_n1", comp162_n1);
   def<double_t>(d, "comp162_n4", comp162_n4);
   def<double_t>(d, "comp121_Abeta_n", comp121_Abeta_n);
   def<double_t>(d, "comp162_n3", comp162_n3);
   def<double_t>(d, "comp26_Abeta_u", comp26_Abeta_u);
   def<double_t>(d, "comp26_Abeta_s", comp26_Abeta_s);
   def<double_t>(d, "comp52_e", comp52_e);
   def<double_t>(d, "comp52_V0_ainf", comp52_V0_ainf);
   def<double_t>(d, "comp155_vcsteps", comp155_vcsteps);
   def<double_t>(d, "comp162_Aalfa", comp162_Aalfa);
   def<double_t>(d, "comp178_vcinc", comp178_vcinc);
   def<double_t>(d, "comp88_Kbeta_c", comp88_Kbeta_c);
   def<double_t>(d, "comp155_vchdur", comp155_vchdur);
   def<double_t>(d, "comp105_cnhold", comp105_cnhold);
   def<double_t>(d, "comp121_e", comp121_e);
   def<double_t>(d, "comp88_Kalpha_c", comp88_Kalpha_c);
   def<double_t>(d, "comp19_V_t", comp19_V_t);
   def<double_t>(d, "comp120_vcbdur", comp120_vcbdur);
   def<double_t>(d, "comp24_e", comp24_e);
   def<double_t>(d, "comp22_e", comp22_e);
   def<double_t>(d, "comp106_V0alpha_d", comp106_V0alpha_d);
   def<double_t>(d, "comp121_B_ninf", comp121_B_ninf);
   def<double_t>(d, "comp22_scale_factor", comp22_scale_factor);
   def<double_t>(d, "comp50_vchdur", comp50_vchdur);
   def<double_t>(d, "comp106_gbar", comp106_gbar);
   def<double_t>(d, "comp25_beta", comp25_beta);
   def<double_t>(d, "comp19_celsius", comp19_celsius);
   def<double_t>(d, "comp162_gbar", comp162_gbar);
   def<double_t>(d, "comp105_vcbdur", comp105_vcbdur);
   def<double_t>(d, "comp106_V0beta_d", comp106_V0beta_d);
   def<double_t>(d, "comp50_vcsteps", comp50_vcsteps);
   def<double_t>(d, "comp106_Abeta_d", comp106_Abeta_d);
   def<double_t>(d, "comp24_tp", comp24_tp);
   def<double_t>(d, "comp120_vcinc", comp120_vcinc);
   def<double_t>(d, "comp162_Ateta", comp162_Ateta);
   def<double_t>(d, "comp155_vcbase", comp155_vcbase);
   def<double_t>(d, "comp50_vcbdur", comp50_vcbdur);
   def<double_t>(d, "comp88_e", comp88_e);
   def<double_t>(d, "comp26_gbar", comp26_gbar);
   def<double_t>(d, "comp121_gbar", comp121_gbar);
   def<double_t>(d, "comp25_cai0", comp25_cai0);
   def<double_t>(d, "comp106_Aalpha_d", comp106_Aalpha_d);
   def<double_t>(d, "comp155_vcbdur", comp155_vcbdur);
   def<double_t>(d, "comp23_e", comp23_e);
   def<double_t>(d, "comp50_vcinc", comp50_vcinc);
   def<double_t>(d, "comp121_V0alpha_n", comp121_V0alpha_n);
   def<double_t>(d, "comp88_Bbeta_c", comp88_Bbeta_c);
   def<double_t>(d, "comp155_vchold", comp155_vchold);
   def<double_t>(d, "comp52_Kalpha_b", comp52_Kalpha_b);
   def<double_t>(d, "comp52_Kalpha_a", comp52_Kalpha_a);
   def<double_t>(d, "comp162_ACoff", comp162_ACoff);
   def<double_t>(d, "comp52_gbar", comp52_gbar);
   def<double_t>(d, "comp156_gbar", comp156_gbar);
   def<double_t>(d, "comp87_vcbase", comp87_vcbase);
   def<double_t>(d, "comp120_vchdur", comp120_vchdur);
   def<double_t>(d, "comp22_tp", comp22_tp);
   def<double_t>(d, "comp162_Aepsilon", comp162_Aepsilon);
   def<double_t>(d, "comp23_tauB", comp23_tauB);
   def<double_t>(d, "comp23_tauA", comp23_tauA);
   def<double_t>(d, "comp23_tau2", comp23_tau2);
   def<double_t>(d, "comp23_tau1", comp23_tau1);
   def<double_t>(d, "comp121_V0_ninf", comp121_V0_ninf);
   def<double_t>(d, "comp162_Adelta", comp162_Adelta);
   def<double_t>(d, "comp105_vchold", comp105_vchold);
   def<double_t>(d, "comp105_vchdur", comp105_vchdur);
   def<double_t>(d, "comp24_tau1", comp24_tau1);
   def<double_t>(d, "comp105_vcbase", comp105_vcbase);
   def<double_t>(d, "comp120_vcsteps", comp120_vcsteps);
   def<double_t>(d, "comp121_Kbeta_n", comp121_Kbeta_n);
   def<double_t>(d, "comp24_tau2", comp24_tau2);
   def<double_t>(d, "comp24_tauA", comp24_tauA);
   def<double_t>(d, "comp136_gbar", comp136_gbar);
   def<double_t>(d, "comp106_Kbeta_d", comp106_Kbeta_d);
   def<double_t>(d, "comp24_tauB", comp24_tauB);
   def<double_t>(d, "comp162_Valfa", comp162_Valfa);
   def<double_t>(d, "comp23_tp", comp23_tp);
   def<double_t>(d, "comp52_V0_binf", comp52_V0_binf);
   def<double_t>(d, "comp88_gbar", comp88_gbar);
   def<double_t>(d, "comp135_vcbase", comp135_vcbase);
   def<double_t>(d, "comp135_vcsteps", comp135_vcsteps);
    

   def<double_t>(d, "celsius", celsius);
   def<double_t>(d, "V_t", V_t);
    
    
}

void Granule::Parameters_::set (const DictionaryDatum &d)
{

   updateValue<double_t>(d, "comp162_Vteta", comp162_Vteta);

    
   updateValue<double_t>(d, "comp121_Kalpha_n", comp121_Kalpha_n);

    
   updateValue<double_t>(d, "comp135_vcbdur", comp135_vcbdur);

    
   updateValue<double_t>(d, "comp136_V0beta_n", comp136_V0beta_n);

    
   updateValue<double_t>(d, "comp50_vchold", comp50_vchold);

    
   updateValue<double_t>(d, "comp162_Agamma", comp162_Agamma);

    
   updateValue<double_t>(d, "comp135_vchold", comp135_vchold);

    
   updateValue<double_t>(d, "comp121_V0beta_n", comp121_V0beta_n);

    
   updateValue<double_t>(d, "comp156_e", comp156_e);

    
   updateValue<double_t>(d, "comp20_C_m", comp20_C_m);

    
   updateValue<double_t>(d, "comp52_V0beta_b", comp52_V0beta_b);

    
   updateValue<double_t>(d, "comp52_V0beta_a", comp52_V0beta_a);

    
   updateValue<double_t>(d, "comp159_ggaba", comp159_ggaba);

    
   updateValue<double_t>(d, "comp162_ACon", comp162_ACon);

    
   updateValue<double_t>(d, "comp87_vchdur", comp87_vchdur);

    
   updateValue<double_t>(d, "comp88_Aalpha_c", comp88_Aalpha_c);

    
   updateValue<double_t>(d, "comp178_vcbase", comp178_vcbase);

    
   updateValue<double_t>(d, "comp135_vcinc", comp135_vcinc);

    
   updateValue<double_t>(d, "comp88_Abeta_c", comp88_Abeta_c);

    
   updateValue<double_t>(d, "comp136_Kbeta_n", comp136_Kbeta_n);

    
   updateValue<double_t>(d, "comp22_tauA", comp22_tauA);

    
   updateValue<double_t>(d, "comp50_vcbase", comp50_vcbase);

    
   updateValue<double_t>(d, "comp87_vchold", comp87_vchold);

    
   updateValue<double_t>(d, "comp22_tauB", comp22_tauB);

    
   updateValue<double_t>(d, "comp21_L", comp21_L);

    
   updateValue<double_t>(d, "comp22_tau1", comp22_tau1);

    
   updateValue<double_t>(d, "comp136_Kalpha_n", comp136_Kalpha_n);

    
   updateValue<double_t>(d, "comp22_tau2", comp22_tau2);

    
   updateValue<double_t>(d, "comp52_K_binf", comp52_K_binf);

    
   updateValue<double_t>(d, "comp87_vcsteps", comp87_vcsteps);

    
   updateValue<double_t>(d, "comp26_V0beta_u", comp26_V0beta_u);

    
   updateValue<double_t>(d, "comp26_V0beta_s", comp26_V0beta_s);

    
   updateValue<double_t>(d, "comp121_Aalpha_n", comp121_Aalpha_n);

    
   updateValue<double_t>(d, "comp120_vcbase", comp120_vcbase);

    
   updateValue<double_t>(d, "comp25_cao", comp25_cao);

    
   updateValue<double_t>(d, "comp52_Aalpha_b", comp52_Aalpha_b);

    
   updateValue<double_t>(d, "comp105_cnbase", comp105_cnbase);

    
   updateValue<double_t>(d, "comp52_Aalpha_a", comp52_Aalpha_a);

    
   updateValue<double_t>(d, "comp106_Kalpha_d", comp106_Kalpha_d);

    
   updateValue<double_t>(d, "comp25_d", comp25_d);

    
   updateValue<double_t>(d, "comp155_vcinc", comp155_vcinc);

    
   updateValue<double_t>(d, "comp25_F", comp25_F);

    
   updateValue<double_t>(d, "comp23_scale_factor", comp23_scale_factor);

    
   updateValue<double_t>(d, "comp136_Aalpha_n", comp136_Aalpha_n);

    
   updateValue<double_t>(d, "comp162_e", comp162_e);

    
   updateValue<double_t>(d, "comp178_vcsteps", comp178_vcsteps);

    
   updateValue<double_t>(d, "comp26_R", comp26_R);

    
   updateValue<double_t>(d, "comp26_Aalpha_u", comp26_Aalpha_u);

    
   updateValue<double_t>(d, "comp26_Aalpha_s", comp26_Aalpha_s);

    
   updateValue<double_t>(d, "comp105_cnout", comp105_cnout);

    
   updateValue<double_t>(d, "comp21_diam", comp21_diam);

    
   updateValue<double_t>(d, "comp135_vchdur", comp135_vchdur);

    
   updateValue<double_t>(d, "comp26_F", comp26_F);

    
   updateValue<double_t>(d, "comp50_cnout", comp50_cnout);

    
   updateValue<double_t>(d, "comp178_vcbdur", comp178_vcbdur);

    
   updateValue<double_t>(d, "comp26_Kalpha_s", comp26_Kalpha_s);

    
   updateValue<double_t>(d, "comp26_Kalpha_u", comp26_Kalpha_u);

    
   updateValue<double_t>(d, "comp26_Kbeta_s", comp26_Kbeta_s);

    
   updateValue<double_t>(d, "comp19_Ra", comp19_Ra);

    
   updateValue<double_t>(d, "comp26_Kbeta_u", comp26_Kbeta_u);

    
   updateValue<double_t>(d, "comp159_egaba", comp159_egaba);

    
   updateValue<double_t>(d, "comp106_e", comp106_e);

    
   updateValue<double_t>(d, "comp52_Kbeta_b", comp52_Kbeta_b);

    
   updateValue<double_t>(d, "comp52_Kbeta_a", comp52_Kbeta_a);

    
   updateValue<double_t>(d, "comp162_AOoff", comp162_AOoff);

    
   updateValue<double_t>(d, "comp162_AOon", comp162_AOon);

    
   updateValue<double_t>(d, "comp136_Abeta_n", comp136_Abeta_n);

    
   updateValue<double_t>(d, "comp52_V0alpha_b", comp52_V0alpha_b);

    
   updateValue<double_t>(d, "comp136_e", comp136_e);

    
   updateValue<double_t>(d, "comp52_V0alpha_a", comp52_V0alpha_a);

    
   updateValue<double_t>(d, "comp105_vcsteps", comp105_vcsteps);

    
   updateValue<double_t>(d, "comp178_vchdur", comp178_vchdur);

    
   updateValue<double_t>(d, "comp50_cn", comp50_cn);

    
   updateValue<double_t>(d, "comp26_V0alpha_u", comp26_V0alpha_u);

    
   updateValue<double_t>(d, "comp162_Abeta", comp162_Abeta);

    
   updateValue<double_t>(d, "comp26_V0alpha_s", comp26_V0alpha_s);

    
   updateValue<double_t>(d, "comp120_vchold", comp120_vchold);

    
   updateValue<double_t>(d, "comp105_cnsteps", comp105_cnsteps);

    
   updateValue<double_t>(d, "comp162_Vbeta", comp162_Vbeta);

    
   updateValue<double_t>(d, "comp88_Balpha_c", comp88_Balpha_c);

    
   updateValue<double_t>(d, "comp24_scale_factor", comp24_scale_factor);

    
   updateValue<double_t>(d, "comp52_K_ainf", comp52_K_ainf);

    
   updateValue<double_t>(d, "comp105_vcinc", comp105_vcinc);

    
   updateValue<double_t>(d, "comp52_Abeta_b", comp52_Abeta_b);

    
   updateValue<double_t>(d, "comp52_Abeta_a", comp52_Abeta_a);

    
   updateValue<double_t>(d, "comp87_vcbdur", comp87_vcbdur);

    
   updateValue<double_t>(d, "comp87_vcinc", comp87_vcinc);

    
   updateValue<double_t>(d, "comp136_V0alpha_n", comp136_V0alpha_n);

    
   updateValue<double_t>(d, "comp178_vchold", comp178_vchold);

    
   updateValue<double_t>(d, "comp105_cninc", comp105_cninc);

    
   updateValue<double_t>(d, "comp162_n2", comp162_n2);

    
   updateValue<double_t>(d, "comp162_n1", comp162_n1);

    
   updateValue<double_t>(d, "comp162_n4", comp162_n4);

    
   updateValue<double_t>(d, "comp121_Abeta_n", comp121_Abeta_n);

    
   updateValue<double_t>(d, "comp162_n3", comp162_n3);

    
   updateValue<double_t>(d, "comp26_Abeta_u", comp26_Abeta_u);

    
   updateValue<double_t>(d, "comp26_Abeta_s", comp26_Abeta_s);

    
   updateValue<double_t>(d, "comp52_e", comp52_e);

    
   updateValue<double_t>(d, "comp52_V0_ainf", comp52_V0_ainf);

    
   updateValue<double_t>(d, "comp155_vcsteps", comp155_vcsteps);

    
   updateValue<double_t>(d, "comp162_Aalfa", comp162_Aalfa);

    
   updateValue<double_t>(d, "comp178_vcinc", comp178_vcinc);

    
   updateValue<double_t>(d, "comp88_Kbeta_c", comp88_Kbeta_c);

    
   updateValue<double_t>(d, "comp155_vchdur", comp155_vchdur);

    
   updateValue<double_t>(d, "comp105_cnhold", comp105_cnhold);

    
   updateValue<double_t>(d, "comp121_e", comp121_e);

    
   updateValue<double_t>(d, "comp88_Kalpha_c", comp88_Kalpha_c);

    
   updateValue<double_t>(d, "comp19_V_t", comp19_V_t);

    
   updateValue<double_t>(d, "comp120_vcbdur", comp120_vcbdur);

    
   updateValue<double_t>(d, "comp24_e", comp24_e);

    
   updateValue<double_t>(d, "comp22_e", comp22_e);

    
   updateValue<double_t>(d, "comp106_V0alpha_d", comp106_V0alpha_d);

    
   updateValue<double_t>(d, "comp121_B_ninf", comp121_B_ninf);

    
   updateValue<double_t>(d, "comp22_scale_factor", comp22_scale_factor);

    
   updateValue<double_t>(d, "comp50_vchdur", comp50_vchdur);

    
   updateValue<double_t>(d, "comp106_gbar", comp106_gbar);

    
   updateValue<double_t>(d, "comp25_beta", comp25_beta);

    
   updateValue<double_t>(d, "comp19_celsius", comp19_celsius);

    
   updateValue<double_t>(d, "comp162_gbar", comp162_gbar);

    
   updateValue<double_t>(d, "comp105_vcbdur", comp105_vcbdur);

    
   updateValue<double_t>(d, "comp106_V0beta_d", comp106_V0beta_d);

    
   updateValue<double_t>(d, "comp50_vcsteps", comp50_vcsteps);

    
   updateValue<double_t>(d, "comp106_Abeta_d", comp106_Abeta_d);

    
   updateValue<double_t>(d, "comp24_tp", comp24_tp);

    
   updateValue<double_t>(d, "comp120_vcinc", comp120_vcinc);

    
   updateValue<double_t>(d, "comp162_Ateta", comp162_Ateta);

    
   updateValue<double_t>(d, "comp155_vcbase", comp155_vcbase);

    
   updateValue<double_t>(d, "comp50_vcbdur", comp50_vcbdur);

    
   updateValue<double_t>(d, "comp88_e", comp88_e);

    
   updateValue<double_t>(d, "comp26_gbar", comp26_gbar);

    
   updateValue<double_t>(d, "comp121_gbar", comp121_gbar);

    
   updateValue<double_t>(d, "comp25_cai0", comp25_cai0);

    
   updateValue<double_t>(d, "comp106_Aalpha_d", comp106_Aalpha_d);

    
   updateValue<double_t>(d, "comp155_vcbdur", comp155_vcbdur);

    
   updateValue<double_t>(d, "comp23_e", comp23_e);

    
   updateValue<double_t>(d, "comp50_vcinc", comp50_vcinc);

    
   updateValue<double_t>(d, "comp121_V0alpha_n", comp121_V0alpha_n);

    
   updateValue<double_t>(d, "comp88_Bbeta_c", comp88_Bbeta_c);

    
   updateValue<double_t>(d, "comp155_vchold", comp155_vchold);

    
   updateValue<double_t>(d, "comp52_Kalpha_b", comp52_Kalpha_b);

    
   updateValue<double_t>(d, "comp52_Kalpha_a", comp52_Kalpha_a);

    
   updateValue<double_t>(d, "comp162_ACoff", comp162_ACoff);

    
   updateValue<double_t>(d, "comp52_gbar", comp52_gbar);

    
   updateValue<double_t>(d, "comp156_gbar", comp156_gbar);

    
   updateValue<double_t>(d, "comp87_vcbase", comp87_vcbase);

    
   updateValue<double_t>(d, "comp120_vchdur", comp120_vchdur);

    
   updateValue<double_t>(d, "comp22_tp", comp22_tp);

    
   updateValue<double_t>(d, "comp162_Aepsilon", comp162_Aepsilon);

    
   updateValue<double_t>(d, "comp23_tauB", comp23_tauB);

    
   updateValue<double_t>(d, "comp23_tauA", comp23_tauA);

    
   updateValue<double_t>(d, "comp23_tau2", comp23_tau2);

    
   updateValue<double_t>(d, "comp23_tau1", comp23_tau1);

    
   updateValue<double_t>(d, "comp121_V0_ninf", comp121_V0_ninf);

    
   updateValue<double_t>(d, "comp162_Adelta", comp162_Adelta);

    
   updateValue<double_t>(d, "comp105_vchold", comp105_vchold);

    
   updateValue<double_t>(d, "comp105_vchdur", comp105_vchdur);

    
   updateValue<double_t>(d, "comp24_tau1", comp24_tau1);

    
   updateValue<double_t>(d, "comp105_vcbase", comp105_vcbase);

    
   updateValue<double_t>(d, "comp120_vcsteps", comp120_vcsteps);

    
   updateValue<double_t>(d, "comp121_Kbeta_n", comp121_Kbeta_n);

    
   updateValue<double_t>(d, "comp24_tau2", comp24_tau2);

    
   updateValue<double_t>(d, "comp24_tauA", comp24_tauA);

    
   updateValue<double_t>(d, "comp136_gbar", comp136_gbar);

    
   updateValue<double_t>(d, "comp106_Kbeta_d", comp106_Kbeta_d);

    
   updateValue<double_t>(d, "comp24_tauB", comp24_tauB);

    
   updateValue<double_t>(d, "comp162_Valfa", comp162_Valfa);

    
   updateValue<double_t>(d, "comp23_tp", comp23_tp);

    
   updateValue<double_t>(d, "comp52_V0_binf", comp52_V0_binf);

    
   updateValue<double_t>(d, "comp88_gbar", comp88_gbar);

    
   updateValue<double_t>(d, "comp135_vcbase", comp135_vcbase);

    
   updateValue<double_t>(d, "comp135_vcsteps", comp135_vcsteps);

    
    


   updateValue<double_t>(d, "celsius", celsius);

   celsius = 1.0 * celsius;

    
   updateValue<double_t>(d, "V_t", V_t);

    
    


   celsius  =  comp19_celsius;
   V_t  =  comp19_V_t;
    

}


void Granule::State_::get (DictionaryDatum &d) const
{

   def<double_t>(d, "comp23_A", y_[27]);

   def<double_t>(d, "comp23_B", y_[26]);

   def<double_t>(d, "comp22_A", y_[25]);

   def<double_t>(d, "comp22_B", y_[24]);

   def<double_t>(d, "comp24_A", y_[23]);

   def<double_t>(d, "comp24_B", y_[22]);

   def<double_t>(d, "comp25_ca", y_[21]);

   def<double_t>(d, "KM_m205", y_[20]);

   def<double_t>(d, "KCa_m195", y_[19]);

   def<double_t>(d, "KA_m189", y_[18]);

   def<double_t>(d, "comp162_Na_zO", y_[17]);

   def<double_t>(d, "comp162_Na_zI6", y_[16]);

   def<double_t>(d, "comp162_Na_zC5", y_[15]);

   def<double_t>(d, "comp162_Na_zI5", y_[14]);

   def<double_t>(d, "comp162_Na_zC4", y_[13]);

   def<double_t>(d, "comp162_Na_zI4", y_[12]);

   def<double_t>(d, "comp162_Na_zC3", y_[11]);

   def<double_t>(d, "comp162_Na_zI3", y_[10]);

   def<double_t>(d, "comp162_Na_zC2", y_[9]);

   def<double_t>(d, "comp162_Na_zI2", y_[8]);

   def<double_t>(d, "comp162_Na_zC1", y_[7]);

   def<double_t>(d, "comp162_Na_zI1", y_[6]);

   def<double_t>(d, "CaHVA_h184", y_[5]);

   def<double_t>(d, "CaHVA_m183", y_[4]);

   def<double_t>(d, "KV_m210", y_[3]);

   def<double_t>(d, "KA_h190", y_[2]);

   def<double_t>(d, "Kir_m200", y_[1]);

   def<double_t>(d, "v", y_[0]);

    
    
    
    
}
    
void Granule::State_::set (const DictionaryDatum &d, const Parameters_&)
{

   updateValue<double_t>(d, "comp23_A", y_[27]);

    
   updateValue<double_t>(d, "comp23_B", y_[26]);

    
   updateValue<double_t>(d, "comp22_A", y_[25]);

    
   updateValue<double_t>(d, "comp22_B", y_[24]);

    
   updateValue<double_t>(d, "comp24_A", y_[23]);

    
   updateValue<double_t>(d, "comp24_B", y_[22]);

    
   updateValue<double_t>(d, "comp25_ca", y_[21]);

    
   updateValue<double_t>(d, "KM_m205", y_[20]);

    
   updateValue<double_t>(d, "KCa_m195", y_[19]);

    
   updateValue<double_t>(d, "KA_m189", y_[18]);

    
   updateValue<double_t>(d, "comp162_Na_zO", y_[17]);

    
   updateValue<double_t>(d, "comp162_Na_zI6", y_[16]);

    
   updateValue<double_t>(d, "comp162_Na_zC5", y_[15]);

    
   updateValue<double_t>(d, "comp162_Na_zI5", y_[14]);

    
   updateValue<double_t>(d, "comp162_Na_zC4", y_[13]);

    
   updateValue<double_t>(d, "comp162_Na_zI4", y_[12]);

    
   updateValue<double_t>(d, "comp162_Na_zC3", y_[11]);

    
   updateValue<double_t>(d, "comp162_Na_zI3", y_[10]);

    
   updateValue<double_t>(d, "comp162_Na_zC2", y_[9]);

    
   updateValue<double_t>(d, "comp162_Na_zI2", y_[8]);

    
   updateValue<double_t>(d, "comp162_Na_zC1", y_[7]);

    
   updateValue<double_t>(d, "comp162_Na_zI1", y_[6]);

    
   updateValue<double_t>(d, "CaHVA_h184", y_[5]);

    
   updateValue<double_t>(d, "CaHVA_m183", y_[4]);

    
   updateValue<double_t>(d, "KV_m210", y_[3]);

    
   updateValue<double_t>(d, "KA_h190", y_[2]);

    
   updateValue<double_t>(d, "Kir_m200", y_[1]);

    
   updateValue<double_t>(d, "v", y_[0]);

   v = 1.0 * v;

    
    

    
    
}



Granule::Buffers_::Buffers_(Granule& n)
    : logger_(n),
      sys_(0)
{
    // Initialization of the remaining members is deferred to
    // init_buffers_().
}


Granule::Buffers_::Buffers_(const Buffers_&, Granule& n)
    : logger_(n),
      sys_(0)
{
    // Initialization of the remaining members is deferred to
    // init_buffers_().
}





Granule::Granule()
    : Archiving_Node(), 
      P_(), 
      S_(P_),
      B_(*this)
{
    recordablesMap_.create();
}


Granule::Granule(const Granule& n)
    : Archiving_Node(n), 
      P_(n.P_), 
      S_(n.S_),
      B_(n.B_, *this)
{
}


Granule::~Granule()
{

  if ( B_.sys_ )
  {
    /* Free y vector */
    N_VDestroy_Serial(B_.y);
    N_VDestroy_Serial(B_.yp);

    /* Free integrator memory */
    if (B_.sys_ != NULL)
    {
      IDAFree(&B_.sys_);
      B_.sys_ = NULL;
    }

  }
}


void Granule::init_node_(const Node& proto)
{
    const Granule& pr = downcast<Granule>(proto);
    P_ = pr.P_;
    S_ = State_(P_);
}


void Granule::init_state_(const Node& proto)
{
    const Granule& pr = downcast<Granule>(proto);
    S_ = State_(pr.P_);
}


void Granule::init_buffers_()
{

      B_.spike_comp23.clear();
      B_.spike_comp24.clear();
      B_.spike_comp22.clear();
   
   B_.currents_.clear();           
   Archiving_Node::clear_history();

   B_.logger_.reset();

   B_.step_ = Time::get_resolution().get_ms();
   B_.IntegrationStep_ = B_.step_;

   B_.I_stim_ = 0.0;


   int status, N, rootdir;

   N = 28;

   // only positive direction (rising edge) of spike events will be detected
   rootdir = 1;

   /* Creates serial vectors of length N */
   B_.y = N_VNew_Serial(N);
   B_.y1 = N_VNew_Serial(N);
   B_.yp = N_VNew_Serial(N);
   if (check_flag((void *)B_.y, "N_VNew_Serial", 0)) throw IDASolverFailure (get_name(), 0);

   for (int i = 0; i < N; i++)
   {
      Ith(B_.y,i) = S_.y_[i];
   }
 
   Granule_dynamics (0.0, B_.y, B_.yp, reinterpret_cast<void*>(this));

   /* Calls IDACreate to create the solver memory */ 
   B_.sys_ = IDACreate();
   if (check_flag((void *)B_.sys_, "IDACreate", 0)) throw IDASolverFailure (get_name(), 0);

  /* Calls IDAInit to initialize the integrator memory and specify the
   * resdual function, the initial time, and the initial values. */
   status = IDAInit (B_.sys_, Granule_residual, 0.0, B_.y, B_.yp);

   if (check_flag(&status, "IDAInit", 1)) throw IDASolverFailure (get_name(), status);


   /* Spike event handler (detects zero-crossing of V-V_t) */
   status = IDARootInit(B_.sys_, 1, (IDARootFn)Granule_event);
   if (check_flag(&status, "IDARootInit", 1)) throw IDASolverFailure (get_name(), status);

   /* Detect only the rising edge of spikes */
   status = IDASetRootDirection(B_.sys_, &rootdir);
   if (check_flag(&status, "IDASetRootDirection", 1)) throw IDASolverFailure (get_name(), status);


   /* Sets the relative and absolute error tolerances of IDA  */
   status = IDASStolerances (B_.sys_, 
                             1e-7, 
                             1e-7);
   if (check_flag(&status, "IDASStolerances", 1)) throw IDASolverFailure (get_name(), status);

   /* Sets the maximum order of IDA  */
   status = IDASetMaxOrd (B_.sys_,5);
   if (check_flag(&status, "IDASetMaxOrd", 1)) throw IDASolverFailure (get_name(), status);

   /* Sets maximum step size. */
   status = IDASetMaxStep (B_.sys_,B_.step_);
   if (check_flag(&status, "IDASetMaxStep", 1)) throw IDASolverFailure (get_name(), status);

   /* Calls IDASetUserData to configure the integrator to pass the 
    * params structure to the right-hand function */
   status = IDASetUserData(B_.sys_, reinterpret_cast<void*>(this));
   if (check_flag(&status, "IDASetUserData", 1)) throw IDASolverFailure (get_name(), status);

   /* Initializes dense linear solver. */
   status = IDADense (B_.sys_, N);
   if (check_flag(&status, "IDADense", 1)) throw IDASolverFailure (get_name(), status);

   status = IDACalcIC(B_.sys_, IDA_Y_INIT, 0.0);
   if (check_flag(&status, "IDACalcIC", 1)) throw IDASolverFailure (get_name(), status);

}

void Granule::calibrate()
{
   B_.logger_.init();  
}



RecordablesMap<Granule> Granule::recordablesMap_;

template <> void RecordablesMap<Granule>::create()
{

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);

   insert_("<obj>", &Granule::get_y_elem_<Granule::State_::<obj>>);


   insert_(names::V_m, &Granule::get_y_elem_<Granule::State_::"V">);


}


    
extern "C" int Granule_event (double t, N_Vector y, N_Vector yp, double *g, void* pnode)
{
  double v, vt; v = -1.0; vt = 0.0;

  // S is shorthand for the type that describes the model state
  typedef Granule::State_ S;
           
  // cast the node ptr to an object of the proper type
  assert(pnode);
  const Granule & node =  *(reinterpret_cast<Granule*>(pnode));
      
  // params is a reference to the model parameters
  const struct Granule::Parameters_ *params;
  params = &(node.P_);
      
  // state is a reference to the model state
  const struct Granule::State_ *state;
  state = &(node.S_);

      
  v = Ith (y, 0);
  vt = params->V_t;
  g[0] = v - vt;

  return 0;
}




inline int Granule::GABA_transients (long_t lag)
{
   double comp23_scale_factor, comp23_w, w, comp23_A, comp23_B;

w = B_.spike_comp23.get_value(lag);
  if (w > 0.0)
  {
     comp23_w  =  w;
     comp23_scale_factor = P_.comp23_scale_factor;     comp23_B  =  Ith(B_.y,26);     comp23_B  =  comp23_B + comp23_w * comp23_scale_factor;     Ith(B_.y,26)  =  comp23_B;     comp23_scale_factor = P_.comp23_scale_factor;     comp23_A  =  Ith(B_.y,27);     comp23_A  =  comp23_A + comp23_w * comp23_scale_factor;     Ith(B_.y,27)  =  comp23_A;
     return 1;
  }

  return 0;
}


inline int Granule::NMDA_transients (long_t lag)
{
   double comp24_scale_factor, comp24_w, w, comp24_A, comp24_B;

w = B_.spike_comp24.get_value(lag);
  if (w > 0.0)
  {
     comp24_w  =  w;
     comp24_scale_factor = P_.comp24_scale_factor;     comp24_B  =  Ith(B_.y,22);     comp24_B  =  comp24_B + comp24_w * comp24_scale_factor;     Ith(B_.y,22)  =  comp24_B;     comp24_scale_factor = P_.comp24_scale_factor;     comp24_A  =  Ith(B_.y,23);     comp24_A  =  comp24_A + comp24_w * comp24_scale_factor;     Ith(B_.y,23)  =  comp24_A;
     return 1;
  }

  return 0;
}


inline int Granule::AMPA_transients (long_t lag)
{
   double comp22_scale_factor, comp22_w, w, comp22_A, comp22_B;

w = B_.spike_comp22.get_value(lag);
  if (w > 0.0)
  {
     comp22_w  =  1.0 * w;
     comp22_scale_factor = P_.comp22_scale_factor;     comp22_B  =  Ith(B_.y,24);     comp22_B  =  comp22_B + comp22_w * comp22_scale_factor;     Ith(B_.y,24)  =  comp22_B;     comp22_scale_factor = P_.comp22_scale_factor;     comp22_A  =  Ith(B_.y,25);     comp22_A  =  comp22_A + comp22_w * comp22_scale_factor;     Ith(B_.y,25)  =  comp22_A;
     return 1;
  }

  return 0;
}


    
  void Granule::update(Time const & origin, const long_t from, const long_t to)
  {

    assert(to >= 0 && (delay) from < Scheduler::get_min_delay());
    assert(from < to);

    double tout;
    long_t current_steps = origin.get_steps();

    for ( long_t lag = from ; lag < to ; ++lag )
      {
        double h = B_.step_;    
	double tt = 0.0 ; 


        int N = NV_LENGTH_S (B_.y);
        tout = (current_steps+lag)*h;

	// adaptive step integration
	while (tt < tout)
	{
	  const int status = IDASolve (B_.sys_, tout, &tt, B_.y, B_.yp, IDA_NORMAL);

          switch (status)
            {
                case IDA_SUCCESS:      continue;
                case IDA_ROOT_RETURN:  
   {
      set_spiketime(Time::ms(tt));
      SpikeEvent se;
      for (int i = 0; i < N; i++)
      {
          S_.y_[i] = Ith(B_.y,i);
      }
      network()->send(*this, se, lag);
      adjust_zero_crossings(B_.y, 1e-7);
      continue;
   }

;
                case IDA_TSTOP_RETURN: break;
                default:               throw IDASolverFailure (get_name(), 0);
            }
   	}

        for (int i = 0; i < N; i++)
        {
           S_.y_[i] = Ith(B_.y,i);
        }

        

  int events = 0;

  events = events + GABA_transients (lag);
  events = events + NMDA_transients (lag);
  events = events + AMPA_transients (lag);


  /* Reinitializes IDA state if any synaptic events have occurred */
  if (events > 0)
  {
     int status = IDAReInit (B_.sys_, tt, B_.y, B_.yp);
     if (check_flag(&status, \"IDAReInit\", 1)) throw IDASolverFailure (get_name(), status);
  }


      }

    B_.I_stim_ = B_.currents_.get_value(lag);
    B_.logger_.record_data(current_steps + lag);

  }


  
void Granule::handle(SpikeEvent & e)
  {
    int flag;
    assert(e.get_delay() > 0);
    flag = 0;

    if ((flag==0) && (e.get_rport() == GABA_SPIKE_RECEPTOR ) && 
        (e.get_weight() > P_.<obj>))
      {
	B_.spike_comp23.add_value(e.get_rel_delivery_steps(network()->get_slice_origin()),
			                           fabs(e.get_weight()) * e.get_multiplicity());
        flag = 1;
      }
    if ((flag==0) && (e.get_rport() == NMDA_SPIKE_RECEPTOR ) && 
        (e.get_weight() > P_.<obj>))
      {
	B_.spike_comp24.add_value(e.get_rel_delivery_steps(network()->get_slice_origin()),
			                           fabs(e.get_weight()) * e.get_multiplicity());
        flag = 1;
      }
    if ((flag==0) && (e.get_rport() == AMPA_SPIKE_RECEPTOR ) && 
        (e.get_weight() > P_.<obj>))
      {
	B_.spike_comp22.add_value(e.get_rel_delivery_steps(network()->get_slice_origin()),
			                           fabs(e.get_weight()) * e.get_multiplicity());
        flag = 1;
      }

  }


void Granule::handle(CurrentEvent& e)
  {
    assert(e.get_delay() > 0);

    const double_t c = e.get_current();
    const double_t w = e.get_weight();

    B_.currents_.add_value(e.get_rel_delivery_steps(network()->get_slice_origin()), w * c);
  }


void Granule::handle(DataLoggingRequest& e)
  {
    B_.logger_.handle(e);
  }
}
